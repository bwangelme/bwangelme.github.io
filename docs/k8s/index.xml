<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – K8S</title>
    <link>https://bwangel.me/docs/k8s/</link>
    <description>Recent content in K8S on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 11 Sep 2023 10:41:32 +0800</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/docs/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: CNI</title>
      <link>https://bwangel.me/docs/k8s/cni/</link>
      <pubDate>Mon, 25 Dec 2023 18:16:42 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/cni/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cni-要求&#34;&gt;CNI 要求&lt;/h2&gt;
&lt;p&gt;CNI 插件的要求可以被简述成两个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连通性(Connectivity), 每个 Pod 通过默认的网卡接口 eth0 分配 IP 地址，并且这个 IP 地址，在节点的根网络空间上可达。&lt;/li&gt;
&lt;li&gt;可达性(Reachability)，跨节点的 Pod 可以直接用 pod ip 通信（不需要经过 NAT）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;验证连通性&#34;&gt;验证连通性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是我用 kind 在本地搭建的一个三节点集群&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cluster&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kind.x-k8s.io/v1alpha4&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;demo&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;control-plane&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kindest/node:v1.26.3@sha256:61b92f38dff6ccc29969e7aa154d34e38b89443af1a2c14e6cfbd2df6419c66f&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kindest/node:v1.26.3@sha256:61b92f38dff6ccc29969e7aa154d34e38b89443af1a2c14e6cfbd2df6419c66f&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kindest/node:v1.26.3@sha256:61b92f38dff6ccc29969e7aa154d34e38b89443af1a2c14e6cfbd2df6419c66f&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; docker ps
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER ID   IMAGE                  COMMAND                   CREATED              STATUS              PORTS                       NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3fdffdb2fa2d   kindest/node:v1.26.3   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr…&amp;#34;&lt;/span&gt;   About a minute ago   Up About a minute   127.0.0.1:34309-&amp;gt;6443/tcp   demo-control-plane
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;646f93b78436   kindest/node:v1.26.3   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr…&amp;#34;&lt;/span&gt;   About a minute ago   Up About a minute                               demo-worker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d5e20cd642fb   kindest/node:v1.26.3   &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/usr/local/bin/entr…&amp;#34;&lt;/span&gt;   About a minute ago   Up About a minute                               demo-worker2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;646f93b78436 是 k8s 的工作节点 &lt;code&gt;demo-worker&lt;/code&gt;，它的进程 ID 是 1568942&lt;/li&gt;
&lt;li&gt;d5e20cd642fb 是 k8s 的工作节点 &lt;code&gt;demo-worker2&lt;/code&gt;，它的进程 ID 是 1568954&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; docker inspect 646f93b78436 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; rg -i &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#34;pid&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Pid&amp;#34;&lt;/span&gt;: 1568942,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; docker inspect d5e20cd642fb &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; rg -i &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#34;pid&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Pid&amp;#34;&lt;/span&gt;: 1568954,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;apple-app-ddb7b6f95-kz2w8 是集群中的一个 pod, 它运行在 demo-worker2 上, 它的 eth0 网卡的地址是 10.244.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; k -n qae get pod -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                        READY   STATUS    RESTARTS   AGE    IP           NODE           NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apple-app-ddb7b6f95-kz2w8   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          117s   10.244.1.2   demo-worker2   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; k -n qae &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -it apple-app-ddb7b6f95-kz2w8 ip addr show eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;POD&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;COMMAND&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; is DEPRECATED and will be removed in a future version. Use kubectl &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;POD&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; -- &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;COMMAND&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; instead.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2: eth0@eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1500&lt;/span&gt; qdisc noqueue state UP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether 1e:a2:83:1b:93:92 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet 10.244.1.2/24 brd 10.244.1.255 scope global eth0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inet6 fe80::1ca2:83ff:fe1b:9392/64 scope link
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       valid_lft forever preferred_lft forever
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我进入 1568942 和 1568954 的网络空间，相当于登陆到了了 k8s 的 worker 节点上，ping pod 是可以 ping 通的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# demo-worker 节点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo nsenter -n -t &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1568942&lt;/span&gt; ping -c &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; 10.244.1.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PING 10.244.1.2 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;10.244.1.2&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 56&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;84&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; bytes of data.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; bytes from 10.244.1.2: &lt;span style=&#34;color:#000&#34;&gt;icmp_seq&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ttl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;0.063 ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; bytes from 10.244.1.2: &lt;span style=&#34;color:#000&#34;&gt;icmp_seq&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ttl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;0.057 ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- 10.244.1.2 ping statistics ---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; packets transmitted, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; received, 0% packet loss, &lt;span style=&#34;color:#204a87&#34;&gt;time&lt;/span&gt; 1011ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rtt min/avg/max/mdev &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; 0.057/0.060/0.063/0.003 ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# demo-worker2 节点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo nsenter -n -t &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1568954&lt;/span&gt; ping -c &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; 10.244.1.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PING 10.244.1.2 &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;10.244.1.2&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; 56&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;84&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; bytes of data.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; bytes from 10.244.1.2: &lt;span style=&#34;color:#000&#34;&gt;icmp_seq&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ttl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;0.059 ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; bytes from 10.244.1.2: &lt;span style=&#34;color:#000&#34;&gt;icmp_seq&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ttl&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;0.017 ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--- 10.244.1.2 ping statistics ---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; packets transmitted, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; received, 0% packet loss, &lt;span style=&#34;color:#204a87&#34;&gt;time&lt;/span&gt; 1004ms
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rtt min/avg/max/mdev &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; 0.017/0.038/0.059/0.021 ms
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;验证可达性&#34;&gt;验证可达性&lt;/h3&gt;
&lt;p&gt;这是集群中的所有 pod, 我在 apple-app-ddb7b6f95-kz2w8 上 ping  local-path-provisioner-75f5b54ffd-slkv5，可以 ping 通&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; k get pod --all-namespaces -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAMESPACE            NAME                                         READY   STATUS    RESTARTS   AGE     IP           NODE                 NOMINATED NODE   READINESS GATES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          coredns-787d4945fb-2sdzq                     1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     10.244.0.3   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          coredns-787d4945fb-kdmsd                     1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     10.244.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          etcd-demo-control-plane                      1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kindnet-jdvn8                                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.4   demo-worker2         &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kindnet-sbm7g                                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kindnet-xcbjv                                1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.3   demo-worker          &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-apiserver-demo-control-plane            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-controller-manager-demo-control-plane   1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-proxy-6kqfz                             1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.3   demo-worker          &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-proxy-nq6dw                             1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.4   demo-worker2         &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-proxy-ws5nj                             1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube-system          kube-scheduler-demo-control-plane            1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     172.23.0.2   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;local-path-storage   local-path-provisioner-75f5b54ffd-slkv5      1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          10m     10.244.0.4   demo-control-plane   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qae                  apple-app-ddb7b6f95-kz2w8                    1/1     Running   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;          9m21s   10.244.1.2   demo-worker2         &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ø&amp;gt; k -n qae exec -it apple-app-ddb7b6f95-kz2w8 -- ping -c 2 10.244.0.4
PING 10.244.0.4 (10.244.0.4): 56 data bytes
64 bytes from 10.244.0.4: seq=0 ttl=62 time=0.063 ms
64 bytes from 10.244.0.4: seq=1 ttl=62 time=0.056 ms

--- 10.244.0.4 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max = 0.056/0.059/0.063 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tkng.io/cni/&#34;&gt;tkng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: K8S In Actions</title>
      <link>https://bwangel.me/docs/k8s/k8s-in-actions/</link>
      <pubDate>Thu, 28 Sep 2023 11:06:47 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/k8s-in-actions/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Pod Tips</title>
      <link>https://bwangel.me/docs/k8s/pod-tips/</link>
      <pubDate>Thu, 02 Mar 2023 09:31:14 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/pod-tips/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;pod-状态计算细节&#34;&gt;Pod 状态计算细节&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2023-03-02-093104.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pod-的-qos-分类&#34;&gt;Pod 的 QoS 分类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;request 是最低资源需求，limit 是最高资源需求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;QoS 类别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Guaranteed(确保)&lt;/td&gt;
&lt;td&gt;Pod 的资源 request 和 limit 相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Burstable(可破裂)&lt;/td&gt;
&lt;td&gt;Pod 的资源 request 小于 limit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BestEffort(尽力而为)&lt;/td&gt;
&lt;td&gt;Pod 的资源没有设置任何 request 和 limit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当计算节点上存在内存/磁盘压力时，k8s 会按照 &lt;code&gt;BestEffort -&amp;gt; Burstable -&amp;gt; Guaranteed&lt;/code&gt; 的顺序一次驱逐 pod.&lt;/p&gt;
&lt;p&gt;CPU 是可以压缩的资源，当 CPU 存在压力时，k8s 不会驱逐 pod.&lt;/p&gt;
&lt;p&gt;通常情况下，Burstable 是最好的 QoS 策略，对于一些重要的核心 pod，可以设置为 Guaranteed, 确保它最后被驱逐。&lt;/p&gt;
&lt;h2 id=&#34;统计集群中运行-pod-的数量&#34;&gt;统计集群中运行 pod 的数量&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum(kube_pod_status_phase{phase=&amp;#34;Running&amp;#34;})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;kube_pod_container_status_ready&lt;/code&gt; 指标有 &lt;code&gt;namespace&lt;/code&gt;, &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;phase&lt;/code&gt; Label 可以对指标进行筛选，其他的看起来都是 prom 相关的&lt;/p&gt;
&lt;p&gt;phase 有五种: Pending|Running|Succeeded|Failed|Unknown&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计处于 Running 和 Succeeded 状态的 Pod，某些 Job 执行成功后是 Succeed 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum(kube_pod_status_phase{phase=~&amp;#34;Running|Succeeded&amp;#34;})
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;按 namespace 统计集群中运行 pod 的数量，并按逆序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sort_desc(sum(kube_pod_status_phase{phase=&amp;#34;Running&amp;#34;}) by (namespace))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics/blob/master/docs/pod-metrics.md&#34;&gt;Pod Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;k8s-停止-pod-的过程&#34;&gt;k8s 停止 Pod 的过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将 Pod 的状态设置为 &lt;code&gt;Terminating&lt;/code&gt;，将 Pod 从 service 的 endpoints 列表中移除。&lt;/li&gt;
&lt;li&gt;执行 &lt;a href=&#34;https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-details&#34;&gt;preStopHook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;发送 SIGTERM 信号给进程。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意:&lt;/strong&gt; k8s 不会等待 preStopHook 结束后再发送信号，发送 SIGTERM 和 执行 preStopHook 是同时进行的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;等待 Pod 正常退出，等待的时间由 &lt;code&gt;terminationGracePeriod&lt;/code&gt; 设置&lt;/li&gt;
&lt;li&gt;如果等待超时，会发送 SIGKILL 信号给进程。&lt;/li&gt;
&lt;li&gt;清理 k8s 中存储的 Pod 信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;参考链接-1&#34;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-terminating-with-grace&#34;&gt;Kubernetes best practices: terminating with grace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deployment Tips</title>
      <link>https://bwangel.me/docs/k8s/deployment-tips/</link>
      <pubDate>Thu, 15 Sep 2022 10:31:16 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/deployment-tips/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;k8s-查询-deployment-的错误&#34;&gt;K8s 查询 Deployment 的错误&lt;/h2&gt;
&lt;p&gt;有时 Deployment 部署失败，我们通过 &lt;code&gt;k descript deploy xxx&lt;/code&gt; 只能看到一个错误信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Conditions:
  Type             Status  Reason
  ----             ------  ------
  ReplicaFailure   True    FailedCreate
Events:            &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时我们需要找到 deploy 对应的 replicaset, describe replicaset 就能够看到对应的错误了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ k describe replicaset &amp;lt;replica-set-name&amp;gt;

Type     Reason            Age                From                   Message
  ----     ------            ----               ----                   -------
  Normal   SuccessfulCreate  13m                replicaset-controller  Created pod: pod
  Warning  FailedCreate      13m                replicaset-controller  Error creating: pods &amp;#34;pod&amp;#34; is forbidden: exceeded quota: custom-resource-quota, requested: cpu=510m, used: cpu=1630m, limited: cpu=2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/64016529/5161084&#34;&gt;kubernetes-replicafailure-failedcreate-but-no-events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: K8S 中观察 CPU Throttling 情况的指标</title>
      <link>https://bwangel.me/docs/k8s/k8s-cpu-throttle-prom-metric/</link>
      <pubDate>Tue, 16 Aug 2022 23:14:25 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/k8s-cpu-throttle-prom-metric/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;p&gt;解释了一下观察 CPU Throttling 情况的指标&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;观察容器-cpu-throttling-的指标&#34;&gt;观察容器 CPU Throttling 的指标&lt;/h2&gt;
&lt;p&gt;k8s 中为每个 Pod 提供了限制 CPU 资源的选项，当 Pod 使用的 CPU 资源超出设置的 limit 时，会发生 Throttling 的情况，即进程被分配的 CPU 时间片被夺走了。&lt;/p&gt;
&lt;p&gt;cAdvisor 提供了三个关于 CPU 运行时间的指标&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;desc&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;container_cpu_cfs_throttled_periods_total&lt;/td&gt;
&lt;td&gt;Number of throttled period intervals&lt;/td&gt;
&lt;td&gt;容器被 Throttled 的 CPU 时间片数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container_cpu_cfs_throttled_seconds_total&lt;/td&gt;
&lt;td&gt;Total time duration the container has been throttled&lt;/td&gt;
&lt;td&gt;容器被 Throttled 的 CPU 时间(单位是秒)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;container_cpu_cfs_periods_total&lt;/td&gt;
&lt;td&gt;Number of elapsed enforcement period intervals&lt;/td&gt;
&lt;td&gt;容器被分配的，应该执行的 CPU 时间片书&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上三个指标都是 prometheus 中的 counter 类型，即只会增加的绝对值，它们的数值对于维护者的观察意义也不大。&lt;/p&gt;
&lt;p&gt;我们常用的指标是&lt;/p&gt;

&lt;div class=&#34;math&#34;&gt;$$\frac{rate(container-cpu-cfs-throttled-periods-total[5m])}{rate(container-cpu-cfs-periods-total[5m])}$$&lt;/div&gt;&lt;p&gt;它表示 CPU 被 Throttling 的时间片占总分配的时间片的比重。我们以此来判断某个容器的 CPU 资源是否不足。&lt;/p&gt;
&lt;h2 id=&#34;指标的去重&#34;&gt;指标的去重&lt;/h2&gt;
&lt;p&gt;以上三个指标针对每个 Pod 都有 N+1 个，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod 的总指标&lt;/li&gt;
&lt;li&gt;pod 中每个容器的指标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以计算时，我们需要设置 &lt;code&gt;{container=&amp;quot;&amp;quot;}&lt;/code&gt; 或 &lt;code&gt;{image=&amp;quot;&amp;quot;}&lt;/code&gt; 来只保留 pod 的指标&lt;/p&gt;
&lt;h2 id=&#34;指标加上-pod-label&#34;&gt;指标加上 Pod label&lt;/h2&gt;
&lt;p&gt;以上的三个指标，他们中的 label 都是和容器相关的(&lt;code&gt;pod&lt;/code&gt;, &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;)，我们需要根据 pod 的 label 来对指标进行聚合，观察某个 deployment 或某个 k8s job 的 CPU Throttling 情况，此时，我们就需要用到 &lt;code&gt;kube_pod_label&lt;/code&gt; 指标，来和上述指标进行相乘。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube_pod_label&lt;/code&gt; 是 &lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;&gt;kube-state-metrics&lt;/a&gt; 提供的指标，它将 k8s label 转换成 prometheus 指标，每个 pod 上的 k8s label 都在 prom 指标中变成 &lt;code&gt;label_xx&lt;/code&gt; 的形式。例如我们假设某个 pod 有 app 和 owner 两个 k8s label，那么它的 prom 指标如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kube_pod_labels{
    cluster=&amp;#34;local&amp;#34;, container=&amp;#34;kube-state-metrics&amp;#34;, endpoint=&amp;#34;http&amp;#34;,
    instance=&amp;#34;172.19.2.101:8080&amp;#34;, job=&amp;#34;kube-state-metrics&amp;#34;, label_app=&amp;#34;http-bin&amp;#34;,
    label_owner=&amp;#34;xyd&amp;#34;, namespace=&amp;#34;default&amp;#34;,
    pod=&amp;#34;http-bin-867bc77ld45d&amp;#34;, prometheus=&amp;#34;monitoring/kube-prom-kube-prometheus-prometheus&amp;#34;,
    uid=&amp;#34;7b9c5473-1455-454d-b5a3-69f08dc99bb1&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;instance&lt;/code&gt; label 表示 kube-state-metrics 的 IP 地址。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rate(
    container_cpu_cfs_throttled_periods_total{pod=&amp;#34;http-bin-867bc77ld45d&amp;#34;, image=&amp;#34;&amp;#34;}[5m]
) * on(pod) group_left(label_app, label_owner) 
    kube_pod_labels{namespace=&amp;#34;default&amp;#34;, pod=&amp;#34;http-bin-867bc77ld45d&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的计算公式中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;* on(pod)&lt;/code&gt; 表示左边的指标 &lt;code&gt;container_cpu_cfs_throttled_periods_total&lt;/code&gt; 和右边的指标 &lt;code&gt;kube_pod_labels&lt;/code&gt; 根据相同的 &lt;code&gt;pod&lt;/code&gt; label，对 value 进行相乘。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_left(label_app, label_owner)&lt;/code&gt; 表示将右边指标的 &lt;code&gt;label_app&lt;/code&gt;, &lt;code&gt;label_owner&lt;/code&gt; 添加到左边指标中，生成一个新指标&lt;/li&gt;
&lt;li&gt;如果写成 &lt;code&gt;group_right(label_app, label_owner)&lt;/code&gt;，表示以右边的指标为基准，将 &lt;code&gt;label_app&lt;/code&gt;, &lt;code&gt;label_owner&lt;/code&gt; 添加上，生成一个新指标&lt;/li&gt;
&lt;li&gt;注意新指标的值是左右两个指标相乘，&lt;code&gt;kube_pod_labels&lt;/code&gt; 的 value 始终是1, 所以新指标的值和 &lt;code&gt;container_cpu_cfs_throttled_periods_total&lt;/code&gt; 相同&lt;/li&gt;
&lt;li&gt;如果针对同一个 pod label, &lt;code&gt;container_cpu_cfs_throttled_periods_total&lt;/code&gt; 有多个，那么就只能写 &lt;code&gt;group_left(label_app, label_owner)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;如果写 &lt;code&gt;group_right(label_app, label_owner)&lt;/code&gt;，prom 不知道如何将多个 &lt;code&gt;container_cpu_cfs_throttled_periods_total&lt;/code&gt; 聚合起来，就会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error executing query: found duplicate series for the match group {pod=&amp;#34;http-bin-867bc77ld45d&amp;#34;} on the left hand-side of the operation: [{...}, {...}];many-to-many matching not allowed: matching labels must be unique on one side
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;正常情况下，&lt;code&gt;kube_pod_label&lt;/code&gt; 针对同一个 pod 只有一个，但是当 kube-state-metrics 重启的时候，由于 kube-state-metrics 的 IP 地址变了，&lt;code&gt;kube_pod_label&lt;/code&gt; 就会出现 pod 相同，但是 &lt;code&gt;instance&lt;/code&gt; 不同的指标。所以，最好还是要保证和 &lt;code&gt;kube_pod_labels&lt;/code&gt; 相乘的指标针对同一个 pod 只有一个，否则当 kube-state-metrics 重启时，相乘的计算公式就会出现以下两种错误。
&lt;ul&gt;
&lt;li&gt;many * many 的错误&lt;/li&gt;
&lt;li&gt;one * group_left() many 的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为 cpu throttled 指标加上 pod label 后，我们再根据 k8s app sum 一下，就得到我们最终想要的结果了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sum(
    rate(container_cpu_cfs_throttled_periods_total{namespace=&amp;#34;default&amp;#34;, image=&amp;#34;&amp;#34;}[5m])
        * on(pod) group_left(label_app, label_owner)
    kube_pod_labels{namespace=&amp;#34;default&amp;#34;}
) by (label_app, label_owner)
  /
sum(
    rate(container_cpu_cfs_periods_total{namespace=&amp;#34;default&amp;#34;, image=&amp;#34;&amp;#34;}[5m])
        * on(pod) group_left(label_app, label_owner)
    kube_pod_labels{namespace=&amp;#34;default&amp;#34;}
) by (label_app, label_owner)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述指标按 &lt;code&gt;label_app&lt;/code&gt; 和 &lt;code&gt;label_owner&lt;/code&gt; 这两个维度，求和了一下符合筛选标签的所有 pod 的 CPU Throttling 时间片的百分比。&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 进程卡住如何 debug</title>
      <link>https://bwangel.me/docs/k8s/process-block/</link>
      <pubDate>Thu, 07 Jul 2022 19:56:13 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/process-block/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;进程卡住如何-debug&#34;&gt;进程卡住如何 Debug&lt;/h2&gt;
&lt;h3 id=&#34;查看-cpu&#34;&gt;查看 CPU&lt;/h3&gt;
&lt;p&gt;利用 prom 指标查看 CPU 使用率，如果从某个时间点后就降低了，说明是阻塞在 IO 上了。&lt;/p&gt;
&lt;h3 id=&#34;查看-io&#34;&gt;查看 IO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看进程当前建立的网络连接 (进入容器内执行)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lsof -i -a -p 1 | grep ESTABLISHED
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;利用-strace&#34;&gt;利用 strace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查看所有的 open, read 系统调用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo strace -e trace=open,read -p {pid}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Review 《How eBPF will solve Service Mesh - Goodbye Sidecars》</title>
      <link>https://bwangel.me/docs/k8s/ebpf-service-mesh/</link>
      <pubDate>Mon, 20 Dec 2021 19:41:20 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/ebpf-service-mesh/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址: &lt;a href=&#34;https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh&#34;&gt;https://isovalent.com/blog/post/2021-12-08-ebpf-servicemesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Service Mesh (服务网格) 是一个概念，描述了现代云原生应用在通信、可见性和安全性方面的要求。目前这个概念的实现涉及到在每个workload 或 pod 中运行 sidecar 代理。这是一种相当低效的方式。在这篇文章中，我们将探讨一个替代 sidecar 模型的方法，在eBPF的帮助下，提供一个透明的 Service Mesh，在低复杂度下具有很高的效率。&lt;/p&gt;
&lt;h2 id=&#34;what-is-service-mesh&#34;&gt;What is Service Mesh?&lt;/h2&gt;
&lt;p&gt;随着分布式应用的引入，额外的可见性、连接性和安全性要求也浮现出来(have surfaced)。应用程序组件在跨越云和城市边界的不受信任的网络中通信，负载均衡需要理解应用协议，弹性(resiliency)变得至关重要(crucial)，安全性必须发展(evolve)到发送者和接收者可以验证彼此身份的模式。在分布式应用的早期，这些要求是通过直接将所需的逻辑嵌入到应用中来解决的。Service Mesh 将这些功能从应用程序中提取出来，作为基础设施的一部分提供给所有应用程序使用，因此不再需要修改每个应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com//2021-12-20-200012.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;纵观 Service Mesh 今天的特点，可以总结为以下几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弹性链接: 服务与服务之间的通信必须能够跨越边界，例如云服务，集群和城市。通信必须是弹性且可容错的。&lt;/li&gt;
&lt;li&gt;L7 流量管理: 负载均衡，频率限制器，弹性都必须在 L7 层(能够理解 HTTP, REST, gRPC, WebSocket 等协议)&lt;/li&gt;
&lt;li&gt;基于身份的安全: 基于网络标识符来实现安全已经不够了，发送和接收服务必须能够基于身份标识认证对方，而不是通过网络标识认证。&lt;/li&gt;
&lt;li&gt;可观察性和可追踪性: 追踪和指标形式的观察，对于理解，监控，调试应用程序的稳定性，性能和可用性至关重要。&lt;/li&gt;
&lt;li&gt;透明性：该功能必须以透明的形式提供给应用程序，即不需要改变应用程序的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在早期，Service Mesh 功能通常以库的形式实现，需要网格中的每个应用程序链接到以对应语言编写的库中。同样的事情也在互联网早期发生过，在那些日子里，应用程序需要维护自己的 TCP/IP 栈。就像我们在这篇文章里讨论的一样，Service Mesh 正在发展成为一种内核职责，就像 TCP/IP 网络栈一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com//2021-12-20-201812.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在今天，Service Mesh 通常是用一种称为 sidecar 模型的架构实现的。这种架构将实现了上述功能的代码封装到4层代理中，然后将应用接收和发送的流量重定向到被称为 sidecar 的代理中。它之所以被成为 Sidecar，是因为每个应用程序都有一个代理，就像摩托车上的挎斗一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com//2021-12-20-202330.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种架构的优点是应用服务自身不再需要实现 Service Mesh 中的功能。如果许多应用服务使用不同语言编写，或者你运行的服务是一个不可变的第三方应用程序，这种架构就很方便。&lt;/p&gt;
&lt;p&gt;这种模型的缺点是有大量的代理，许多额外的网络连接和复杂的重定向逻辑将应用的网络流量送入到代理中。除此之外，四层代理能够传输的网络流量的类型也有限制(四层代理无法理解 HTTP/Thrift 等七层协议)。代理在其能够支持的网络协议上是被限制的。&lt;/p&gt;
&lt;h2 id=&#34;a-history-of-connectivity-moving-into-the-kernel&#34;&gt;A history of connectivity moving into the Kernel&lt;/h2&gt;
&lt;p&gt;几十年来，在应用程序之间提供安全可靠的连接一直是操作系统的责任。你们中的一些人可能还记得早期 Unix 和 Linux 时代的 &lt;a href=&#34;https://en.wikipedia.org/wiki/TCP_Wrappers&#34;&gt;TCP Wrapper&lt;/a&gt; 和 tcpd。它可以被认为是原始的 sidecar ，tcpd 允许用户透明地添加日志，访问控制，主机名验证，欺骗保护功能到应用程序中，而不需要修改应用程序。
它使用了 libwrap 库，而且，在一个有趣的平行与服务网格历史的故事中，这个库也是以前的应用程序提供这些功能的链接对象。tcpd 带来的是能够在不修改现有应用程序的情况下将这些功能透明地添加到现有应用程序中。最终，所有这些功能都进入了 Linux 本身，并以一种更有效，更强大的方式提供给应用程序。今天，这已经演变成了我们熟知的 iptables。&lt;/p&gt;
&lt;p&gt;然而，iptables 显然不适合解决现代网络的连接性，安全性和可观察性要求，因为它在网络层面上运行，缺少对应用协议层的任何理解。自然，阻力最小的路径是回到库模型，然后是 sidecar 模式。现在，我们正处于这样一个阶段：为了最佳的透明度、效率性和安全性，在操作系统中原生地支持这种模式是有意义的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-111200.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在曾经的 TCPD 时代使用的 &lt;code&gt;连接记录 (connection logging back)&lt;/code&gt;，现在变成了&lt;code&gt;追踪 (tracing)&lt;/code&gt;。在 IP 层的访问控制已经进化成了在应用层的授权(例如使用 JWT 进行授权)。主机名验证已经被更强大的认证所取代，例如双端 TLS 认证。网络负载均衡已经扩展到 L7 层的流量管理功能。HTTP 重试是新的 TCP 重传。过去使用黑洞路由解决的问题今天被称为 熔断(circuit breaking)。这些都不是根本性的新问题，但所需的环境和控制都已经发生了变化。&lt;/p&gt;
&lt;h2 id=&#34;extending-the-kernel-namespace-concept&#34;&gt;Extending the Kernel Namespace Concept&lt;/h2&gt;
&lt;p&gt;Linux 内核已经有一个概念，可以共享相同的功能，并使其对系统上运行的许多应用程序可用。这个概念被称为命名空间，它构成了我们今天所熟知的容器技术的基础。命名空间(内核的概念)存在于各种抽象中，包括文件系统、用户管理，挂载设备，进程，网络等。这就是允许独立的容器用 不同的文件系统视图、不同的用户集存在，以及允许多个容器绑定到同一台主机上的同一个端口。在 cgroups 的帮助下，这个概念得到了扩展，可以对 CPU、内存和网络等资源进行资源管理和有限排序。从云原生应用开发者的角度来看，cgroups 和 资源被紧密地整合到了我们熟知的 “容器” 概念中。&lt;/p&gt;
&lt;p&gt;符合逻辑的是，如果我们认为服务网格是操作系统的责任，那么它必须遵循并集成命名空间和 cgroups 的概念。这看起来是这样的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-113330.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;不出所料，这看起来非常自然，而且可能是大多数用户从简单的角度所期望的。应用程序保持不变，它们就像以前一样继续使用网络套接字进行通信。理想的服务网络功能是作为 Linux 的一部分透明地提供的。它就在那里，就像今天的 TCP 一样。&lt;/p&gt;
&lt;h2 id=&#34;the-cost-of-sidecar-injection&#34;&gt;The Cost of Sidecar Injection&lt;/h2&gt;
&lt;p&gt;如果我们仔细研究一下 sidecar 模型，我们会发现它实际上是在试图模仿这种模型。应用程序继续使用套接字，一切都被塞进 Linux 内核的网络命名空间。然而，这让它比看起来要复杂许多，需要许多额外的步骤来透明地注入 sidecar 代理:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-114543.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种额外的复杂性在延迟和额外资源消耗方面付出了巨大的代价。早期的基准测试表明，这让延迟增加了3到4倍，而且所有的代理都需要大量的额外内存。在本文的后面，我们将研究这两点，因为我们将要将它和 eBPF 模型比较。&lt;/p&gt;
&lt;h2 id=&#34;unlocking-the-kernel-service-mesh-with-ebpf&#34;&gt;Unlocking the Kernel Service Mesh with eBPF&lt;/h2&gt;
&lt;p&gt;为什么我们以前在内核中没有创建一个服务网格？有些人半开玩笑地说，kube-proxy 是最初的服务网格(See &lt;a href=&#34;https://www.youtube.com/watch?v=lUF88T16YqY&amp;amp;ab_channel=CloudNativeRejekts&#34;&gt;We&amp;rsquo;ve Made Quite A Mesh  - Tim Hockin, Google&lt;/a&gt;)。这句话是有一定道理的。kube-proxy 是一个很好的例子，说明了 Linux 内核在依靠传统的基于网络的 iptables 功能实现服务网格时，可以达到多么接近。然而，这还不够，L7 的上下文是缺失的。kube-proxy 完全在数据包层面操作，现代应用程序需要 L7 层的流量管理，追踪，认证和额外的可靠性保证。kube-proxy 不能在网络层面上提供这些。&lt;/p&gt;
&lt;p&gt;eBPF 改变了这个等式( equation )，它允许动态地扩展 Linux 内核的功能。我们已经使用 eBPF 为 Cilium 构建了一个高效的网络，安全和可观察的数据通路。并将其直接嵌入到 Linux 内核。应用这个相同的概念，我们也可以在内核层面上解决服务网格的需求。事实上，Cilium 已经实现了各种所需的概念，例如基于身份的安全，L3-L7可观察性和授权，加密，负载均衡。缺少的部分 Cilium 正在添加中。在本文的莫问，你会发现如何加入有 Cilium 社区推动的 Cilium 服务网格 beta 项目的细节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-141203.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;你们中的一些人可能想知道为什么Linux内核社区没有直接解决这些需求。eBPF有一个巨大的优势，eBPF代码可以在运行时插入到现有的Linux内核中，类似于Linux内核模块，但与内核模块不同，它可以以安全和可移植的方式进行。这使得eBPF的实现能够随着服务网状结构社区的发展而继续发展。新的内核版本需要几年时间才能进入用户手中。eBPF是一项关键技术，它使Linux内核能够跟上快速发展的云原生技术栈。&lt;/p&gt;
&lt;h2 id=&#34;ebpf-based-l7-tracing--metrics-without-sidecars&#34;&gt;eBPF-based L7 Tracing &amp;amp; Metrics without Sidecars&lt;/h2&gt;
&lt;p&gt;让我们以 L7 层的追踪和指标可观察性作为一个具体的例子，来说明基于 eBPF 的服务网格在保持低延迟和保持低可观察成本上有巨大的作用。应用程序团队依靠应用程序的可见性和可监控作为基本要求，这包括了请求跟踪，HTTP 响应率，服务延迟信息等。然而，这些观察不应该有明显的成本(延迟，复杂性，资源等成本)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-142614.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在下面的基准测试中，我们可以看到早期的测量结果，即通过eBPF或sidecar方法实现HTTP可见性对延迟的影响。
该测试是在两个不同节点上运行的两个pod之间，通过固定数量的连接每秒稳定地执行 10K 个HTTP请求，并测量请求的平均延迟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-143216.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们故意不提这些测量中使用的具体代理，因为它并不重要。对于我们测试过的所有代理，结果几乎都是一样的。要明确的是，这不是关于Envoy、Linkerd、Nginx或其他代理是否更快的实验。所提到的代理有差异，但与首先注入代理的成本相比，它们是微不足道的。几乎没有开销是来自代理本身的逻辑。开销是通过注入代理、将网络流量重定向到它、终止连接和启动新连接而增加的。&lt;/p&gt;
&lt;p&gt;这些早期的测量结果表明，基于 eBPF 的内核方法是非常有前途的，可以实现完全透明的服务网状结构的愿望，而且没有明显的开销。&lt;/p&gt;
&lt;h2 id=&#34;ebpf-accelerated-per-node-proxy&#34;&gt;eBPF Accelerated Per-Node Proxy&lt;/h2&gt;
&lt;p&gt;越来越多的用例可以用这种仅有eBPF的方法来覆盖，从而完全取消L4代理。对于一些用例，仍然需要一个代理。例如，当连接需要拼接时，当TLS终止被执行时，或对于某些形式的HTTP授权。&lt;/p&gt;
&lt;p&gt;我们的eBPF服务网格工作将继续关注那些从性能角度可以获得最大收益的领域。如果你必须执行TLS终止，你可能不介意在流量流入集群时终止一次与代理的连接。然而，你会更关心在每个连接的路径中注入两个代理的影响，只是为了提取HTTP指标和跟踪数据。&lt;/p&gt;
&lt;p&gt;当一个用例不能用纯eBPF的方法来实现时，服务网格可以 fallback 到 per-node 的代理模型，直接将代理与内核的套接字层结合起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-144528.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;eBPF不依赖网络层的重定向，而是直接在套接字级别注入代理，保持短路径。在 Cilium 的案例中，正在使用 Envoy，尽管从架构的角度来看，任何代理都可以被整合到这个模型。从概念上讲，这允许将Linux内核网络命名空间的概念直接扩展到Envoy监听器配置的概念，并将Envoy变成一个多用户代理。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-vs-per-node-proxy&#34;&gt;Sidecar vs per-Node Proxy&lt;/h2&gt;
&lt;p&gt;即使需要代理，代理的成本也会根据部署的架构而有所不同。让我们来看看 per-node 的代理模式与 sidecar 模式的比较，看看它们是如何比较的。&lt;/p&gt;
&lt;h3 id=&#34;proxies-per-connection&#34;&gt;Proxies per Connection&lt;/h3&gt;
&lt;p&gt;所需的网络连接数将会根据图片上的代理模式发生变化。最简单的场景是 sidecar-free 模型，这意味着网络连接的数量没有变化。一个连接就能够 serve 请求，eBPF 将会在已有的连接上提供追踪，负载均衡等服务网格的能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-150117.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;用 sidecar 模型实现同样的功能，需要在连接中注入两次代理，这就导致了需要维护三个连接。进一步导致开销的增加和套接字缓冲区所需的内存倍增，表现为更高的服务到服务的延迟。这就是我们之前在无 sidecar L7 可见性部分看到的 sidecar 开销。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-150455.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换到 per-node 的代理模式使我们能够摆脱其中一个代理，因为我们不再依赖在每个工作负载中运行一个sidecar。比起不需要额外的连接，这还是不够理想，但比起总是需要两个额外的连接要好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-150625.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;total-number-of-proxies-required&#34;&gt;Total number of proxies required&lt;/h3&gt;
&lt;p&gt;在每个工作负载中运行一个 sidecar 会导致大量的代理。即使每个单独的代理实例在其内存占用方面是相当优化的，但实例的数量之多将导致总的影响很大。此外，每个代理维护的数据结构，如路由和端点表，随着集群的增长而增长，所以集群越大，每个代理的内存消耗就越高。今天，一些服务网格试图通过将部分路由表推送给单个代理来解决这个问题，限制他们可以路由到哪里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-151028.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;让我们假设在一个500个节点的集群中，每一个节点有30个pod，一个基于sidecar的架构将需要运行15K个proxy。在每个代理消耗70MB内存的情况下（已经假设了严重优化的路由表），这仍然导致集群中所有sidecar消耗1TB内存。在 per-node 模型中，假设每个代理的内存足迹相同，500个代理将消耗不超过34GB的内存。&lt;/p&gt;
&lt;h3 id=&#34;multi-tenancy&#34;&gt;Multi-Tenancy&lt;/h3&gt;
&lt;p&gt;当我们从 sidecar 模型转向 per-node 模型时，代理将为多个应用程序提供连接。代理必须有多租户意识。这与我们从使用单个虚拟机转向使用容器时发生的过渡完全相同。由于我们不再使用在每个虚拟机中运行的完全独立的操作系统副本，而开始与多个应用程序共享操作系统，Linux 必须有多租户意识。这就是命名空间和 cgroup 存在的原因。如果没有它们，一个容器可能会消耗一个系统的所有资源，容器可能会以不受控制的方式访问对方的文件系统。&lt;/p&gt;
&lt;p&gt;如果在服务网格级别的网络资源上表现得完全一样，那不是很好吗？Envoy已经有了命名空间的初步概念，它们被称为监听器。监听器可以携带单独的配置并独立运行。这将开启全新的可能性：突然间，我们可以很容易地控制资源消耗，建立公平的排队规则，并将可用的资源平等地分配给所有的应用程序，或者按照指定的规则分配。这可以而且应该与我们今天在 Kubernetes 中定义应用程序的CPU和内存约束的方式完全一样。如果你想了解这个话题，我曾在EnvoyCon上讲过这个问题（&lt;a href=&#34;https://www.youtube.com/watch?v=08opgZkdYIw&#34;&gt;Envoy Namespaces - Operating an Envoy-based Service Mesh at a Fraction of the Cost, Thomas Graf, EnvoyCon 2019&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;want-to-get-involved---join-the-cilium-service-mesh-beta&#34;&gt;Want to get Involved? - Join the Cilium Service Mesh Beta&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-01-29-151704.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;伴随着即将发布的Cilium 1.11，Cilium社区正在举办一个新的Cilium Service Mesh测试项目。它的特点是，新的构建将使以下功能可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L7流量管理和负载平衡（HTTP、gRPC&amp;hellip;)&lt;/li&gt;
&lt;li&gt;跨集群、云和场所的拓扑感知路由&lt;/li&gt;
&lt;li&gt;TLS终结&lt;/li&gt;
&lt;li&gt;通过Envoy配置的金丝雀展开、重试、速率限制、断路等。&lt;/li&gt;
&lt;li&gt;通过OpenTelemetry和Jaeger集成进行追踪&lt;/li&gt;
&lt;li&gt;内置Kubernetes入口支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述所有功能都可在 &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;github.com/cilium/cilium&lt;/a&gt; 上的功能分支中找到。测试计划允许 Cilium 维护者直接与用户接触，了解他们的需求。要注册，你可以直接填写这个&lt;a href=&#34;https://forms.gle/j9fwhAC6HnHRJQKeA&#34;&gt;表格&lt;/a&gt;，或者你可以在 Cilium 社区的&lt;a href=&#34;https://cilium.io/blog/2021/12/01/cilium-service-mesh-beta/&#34;&gt;公告&lt;/a&gt;中阅读更多关于该计划的信息。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;eBPF是提供本地和高效的服务网格实现的答案。它将把我们从 sidecar 模型中解放出来，并允许将现有的代理技术整合到现有的内核命名概念中，使它们成为我们每天都在使用的美丽容器抽象的一部分。除此之外，eBPF将能够卸载越来越多的目前由代理执行的功能，以进一步减少开销和复杂性。通过能够整合几乎任何现有的代理，该架构也允许与大多数现有的服务服务网格（Istio、SMI、Linkerd&amp;hellip;）整合。这将使eBPF的好处提供给广大的终端用户，同时将数据通路的效率和开销讨论与控制平面方面的问题相分离。&lt;/p&gt;
&lt;p&gt;如果你对探索这一领域感兴趣，我们很愿意听到你的意见。请随时通过 Twitter 或eBPF &amp;amp; Cilium Slack联系我们。&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/how-ebpf-streamlines-the-service-mesh/&#34;&gt;How eBPF Streamlines the Service Mesh&lt;/a&gt;, Liz Rice, The New Stack&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/blog/2021/12/01/cilium-service-mesh-beta/&#34;&gt;Cilium Service Mesh Beta Program&lt;/a&gt;, Cilium Community&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/learn/&#34;&gt;Learn more about Cilium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 使用 Buildkit 和 Containerd 构建运行容器</title>
      <link>https://bwangel.me/docs/k8s/buildkit/</link>
      <pubDate>Mon, 08 Nov 2021 12:43:04 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/k8s/buildkit/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;
&lt;h3 id=&#34;安装--运行-containerd&#34;&gt;安装 &amp;amp; 运行 Containerd&lt;/h3&gt;
&lt;p&gt;我的电脑是 Ubuntu 20.04 ，直接通过 deb 包安装的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 安装 containerd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install containerd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 将 containerd 设置为开机自动启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl &lt;span style=&#34;color:#204a87&#34;&gt;enable&lt;/span&gt; containerd.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动  containerd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start containerd.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 查看 containerd 的版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Client:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Version:  1.5.2-0ubuntu1~20.04.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Revision:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Go version: go1.13.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Server:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Version:  1.5.2-0ubuntu1~20.04.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Revision:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  UUID: 2e890619-f1a0-4b0f-8c4f-3363136c0c38
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;containerd 的配置文件在 &lt;code&gt;/etc/containerd/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装--运行-buildkitd&#34;&gt;安装 &amp;amp; 运行 buildkitd&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载 buildkit&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ~/.local/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/moby/buildkit/releases/download/v0.9.2/buildkit-v0.9.2.linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 解压 buildkit 的相关二进制文件到 ~/.local/bin 目录中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xvf buildkit-v0.9.2.linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;为 buildkit 创建 systemd service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;向 &lt;code&gt;/etc/systemd/system/buildkit.service&lt;/code&gt; 中写入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Unit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;BuildKit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Requires&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;buildkit.socket
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;buildkit.socketDocumentation&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;https://github.com/moby/buildkit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Service&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;/home/xuyundong/.local/bin/buildkitd --oci-worker&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;false&lt;/span&gt; --containerd-worker&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt; --addr tcp://localhost:1234
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Install&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;multi-user.target
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--oci-worker=false&lt;/code&gt; 和 &lt;code&gt;--containerd-worker=true&lt;/code&gt; 表示使用 containerd 作为 buildkit 的后端 worker&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--addr tcp://localhost:1234&lt;/code&gt; 表示监听 &lt;code&gt;localhost:1234&lt;/code&gt; 端口和客户端通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;向 &lt;code&gt;/etc/systemd/system/buildkit.socket&lt;/code&gt; 中写入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Unit&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;BuildKit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Documentation&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;https://github.com/moby/buildkit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Socket&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;ListenStream&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;%t/buildkit/buildkitd.sock
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Install&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sockets.target
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;启动 buildkit daemon&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl start buildkit.service
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用-buildkit-构建镜像&#34;&gt;使用 buildkit 构建镜像&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建 hello.go 文件，写一个简单的 web server&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HandleFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;writer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Fprintf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;writer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello, containerd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Listen on %v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Fatalln&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;编写 Dockerfile&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM golang:1.16

COPY hello.go /src/hello.go
RUN go build -o /src/hello /src/hello.go
ENTRYPOINT [&amp;#34;/src/hello&amp;#34;]%
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;构建镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo ~/.local/bin/buildctl --addr tcp://localhost:1234 build --frontend=dockerfile.v0 --local context=. --local dockerfile=. --output type=image,name=hel:latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;--output&lt;/code&gt; 指定输出镜像的名字和类型&lt;/p&gt;
&lt;p&gt;构建好的镜像会放到 containerd 的 buildkit namespace 下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ø&amp;gt; sudo ctr -n buildkit i ls
REF          TYPE                                                 DIGEST                                                                  SIZE      PLATFORMS   LABELS
hel:latest   application/vnd.docker.distribution.manifest.v2+json sha256:00fdb709c6f938df80d96a2c7e0677351f1f82a4c6cd54f618c0f96d4006705c 314.5 MiB linux/amd64 -
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用-containerd-运行镜像&#34;&gt;使用 containerd 运行镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 创建 container&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ctr -n buildkit c create hel:latest hel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启动 task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ctr -n buildkit t start -d hel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# exec 进入到 task 中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# --exec-id 参数可以随便写，只要唯一就行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ctr -n buildkit t &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; --exec-id &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; -t hel bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 在 容器内使用 curl 访问 web server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@lazyubuntu:/go# curl 127.0.0.1:8080
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hello, containerdroot@lazyubuntu:/go#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 停掉 task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit t &lt;span style=&#34;color:#204a87&#34;&gt;kill&lt;/span&gt; hel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit t ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TASK    PID      STATUS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hel     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;47605&lt;/span&gt;    STOPPED
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 删除 task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit t rm hel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WARN&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;0000&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; task hel &lt;span style=&#34;color:#204a87&#34;&gt;exit&lt;/span&gt; with non-zero &lt;span style=&#34;color:#204a87&#34;&gt;exit&lt;/span&gt; code &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit t ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TASK    PID    STATUS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 删除容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit c ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CONTAINER    IMAGE         RUNTIME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hel          hel:latest    io.containerd.runc.v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; sudo ctr -n buildkit c rm hel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.qikqiak.com/post/containerd-usage/&#34;&gt;一文搞懂容器运行时 Containerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.duyidong.com/2019/05/19/build-image-in-container-via-buildkit/&#34;&gt;下一代镜像构建工具 Buildkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/366671300&#34;&gt;用buildkit和containerd构建镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.frognew.com/2021/05/relearning-container-05.html&#34;&gt;重学容器05: 使用nerdctl + buildkitd构建容器镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mobyproject.org/introducing-buildkit-17e056cc5317&#34;&gt;Introducing BuildKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
  </channel>
</rss>
