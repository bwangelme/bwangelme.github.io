<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – git</title>
    <link>https://bwangel.me/tags/git/</link>
    <description>Recent content in git on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sat, 20 Jan 2024 22:26:51 +0800</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Git Tips</title>
      <link>https://bwangel.me/docs/tools/git/</link>
      <pubDate>Sat, 20 Jan 2024 22:26:51 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/tools/git/</guid>
      <description>
        
        
        &lt;h2 id=&#34;git-ssh-push-超时&#34;&gt;Git ssh push 超时&lt;/h2&gt;
&lt;p&gt;修改 &lt;code&gt;~/.git/config&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Add section below to it
Host github.com
  Hostname ssh.github.com
  Port 443
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将 push 的端口从 22 改成 443，有可能绕过 GFW&lt;/p&gt;
&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;p&gt;22 端口超时&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh -T git@github.com
ssh: connect to host github.com port 22: Connection timed out
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;443 端口能联通&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ø&amp;gt; ssh -T -p 443 git@github.com
Hi bwangelme! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Golang Build 出错: error obtaining VCS status: exit status 128</title>
      <link>https://bwangel.me/docs/golang/go-build-vcsmap/</link>
      <pubDate>Tue, 21 Mar 2023 12:07:05 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/golang/go-build-vcsmap/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;go-build-时遇到了-error-obtaining-vcs-status-错误&#34;&gt;Go build 时遇到了 error obtaining VCS status 错误&lt;/h2&gt;
&lt;p&gt;我们的 Golang 项目都是在 docker 中 build 的，最近在 build 的时，遇到了以下的错误:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;error obtaining VCS status: exit status 128
        Use -buildvcs=false to disable VCS stamping.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;build golang 项目的 dockerfile 如下，我们会先把代码目录的所有者变成 bwangel, 再执行 go build:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM golang:1.18-buster

RUN sed -i &amp;#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&amp;#39; /etc/apt/sources.list
RUN apt-get update &amp;amp;&amp;amp; apt-get -yq install sudo &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*;

RUN git clone https://github.com/bwangelme/rdcdemo.git /go/src/
RUN /usr/sbin/useradd \
        --user-group \
        --create-home \
        --uid 1001 --shell &amp;#39;/bin/bash&amp;#39; \
        bwangel &amp;amp;&amp;amp; \
    chown bwangel:bwangel -R /go/src

WORKDIR /go/src/
RUN go build .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据 buildvcs 这个关键字，我找到了 Go 1.18 的 &lt;a href=&#34;https://tip.golang.org/doc/go1.18&#34;&gt;release notes&lt;/a&gt;，其中关于 buildvcs 的描述是这样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The go command now embeds version control information in binaries. It includes the currently checked-out revision, commit time, and a flag indicating whether edited or untracked files are present. Version control information is embedded if the go command is invoked in a directory within a Git, Mercurial, Fossil, or Bazaar repository, and the main package and its containing main module are in the same repository. This information may be omitted using the flag -buildvcs=false.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Additionally, the go command embeds information about the build, including build and tool tags (set with -tags), compiler, assembler, and linker flags (like -gcflags), whether cgo was enabled, and if it was, the values of the cgo environment variables (like CGO_CFLAGS). Both VCS and build information may be read together with module information using go version -m file or runtime/debug.ReadBuildInfo (for the currently running binary) or the new debug/buildinfo package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 1.18 开始，Golang 在执行 build 时，会将 Git Commit Revision, Commit 时间，和是否有文件 Untracked 的标记写入到二进制中，使用 &lt;code&gt;go version -m &amp;lt;file&amp;gt;&lt;/code&gt; 能够查看这些信息。&lt;/p&gt;
&lt;p&gt;例如下面的代码中我们查看了 rdcdemo 文件的信息，可以看到执行 build 时 git commit revision 是 &lt;code&gt;8157a03bdfd846437cd0acdc1a7391ad9a13f6b3&lt;/code&gt;, 这个 Commit 的创建时间是 &lt;code&gt;2021-09-26&lt;/code&gt;, &lt;code&gt;vcs.modified=true&lt;/code&gt; 表示有修改尚未提交到 git 中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ø&amp;gt; go version -m rdcdemo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rdcdemo: go1.18.9
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        path    rdcdemo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mod     rdcdemo &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;devel&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dep     github.com/cespare/xxhash/v2    v2.1.1  h1:6MnRN8NT7+YBpUIWxHtefFZOKTAPgGjpQSxqLNn0+qY&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dep     github.com/dgryski/go-rendezvous        v0.0.0-20200823014737-9f7001d12a5f      h1:lO4WD4F/rVNCu3HqELle0jiPLLBs70cWOduZpkS1E78&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dep     github.com/go-redis/redis/v8    v8.11.3 h1:GCjoYp8c+yQTJfc0n69iwSiHjvuAdruxl7elnZCxgt8&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   -compiler&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;gc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;CGO_CFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;CGO_CPPFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;CGO_CXXFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;CGO_LDFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;amd64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;GOAMD64&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   &lt;span style=&#34;color:#000&#34;&gt;vcs&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   vcs.revision&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;8157a03bdfd846437cd0acdc1a7391ad9a13f6b3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   vcs.time&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;2021-09-26T11:45:50Z
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build   vcs.modified&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 build 时加上 &lt;code&gt;-buildvcs=false&lt;/code&gt; 可以不添加这些信息。&lt;/p&gt;
&lt;h2 id=&#34;获取-vcs-信息的时候为什么会出错&#34;&gt;获取 vcs 信息的时候为什么会出错&lt;/h2&gt;
&lt;p&gt;报错 &lt;code&gt;error obtaining VCS status&lt;/code&gt; 表示 Golang 获取 vcs 信息时出错了，但我还想往下深究一下，具体出了什么错误。此时就可以给 go build 加上 &lt;code&gt;-x -v&lt;/code&gt; 选项，这样 go build 就会输出每一步执行的操作:&lt;/p&gt;
&lt;p&gt;修改上述 dockerfile, 添加 build 选项 &lt;code&gt;-x -v&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM golang:1.18-buster

RUN sed -i &amp;#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&amp;#39; /etc/apt/sources.list
RUN apt-get update &amp;amp;&amp;amp; apt-get -yq install sudo &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*;

RUN git clone https://github.com/bwangelme/rdcdemo.git /go/src/
RUN /usr/sbin/useradd \
        --user-group \
        --create-home \
        --uid 1001 --shell &amp;#39;/bin/bash&amp;#39; \
        bwangel &amp;amp;&amp;amp; \
    chown bwangel:bwangel -R /go/src

WORKDIR /go/src/
RUN go build -x -v .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时出错信息变多了，可以看到，是 Go build 在执行 &lt;code&gt;git status --porcelain&lt;/code&gt; 的时候出错了，错误信息是 &lt;code&gt;detected dubious ownership in repository&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WORK=/tmp/go-build975996823
cd /go/src
git status --porcelain
# cd /go/src; git status --porcelain
fatal: detected dubious ownership in repository at &amp;#39;/go/src&amp;#39;
To add an exception for this directory, call:

        git config --global --add safe.directory /go/src
error obtaining VCS status: exit status 128
        Use -buildvcs=false to disable VCS stamping.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;git-为什么要检查-git-目录的-owner&#34;&gt;Git 为什么要检查 .git 目录的 owner&lt;/h2&gt;
&lt;p&gt;根据关键字 &lt;code&gt;detected dubious ownership in repository&lt;/code&gt;, 我找到了一篇文章: &lt;a href=&#34;https://medium.com/@thecodinganalyst/git-detect-dubious-ownership-in-repository-e7f33037a8f&#34;&gt;Git detect dubious ownership in repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章说，Git 命令在执行时，会执行 &lt;code&gt;.git/&lt;/code&gt; 目录中的文件，如果 &lt;code&gt;.git/&lt;/code&gt; 目录中的文件被恶意篡改了，那么就会造成安全漏洞。&lt;/p&gt;
&lt;p&gt;例如 &lt;code&gt;/go/src&lt;/code&gt; 这个目录是 bwangel 用户所有的，它修改了 &lt;code&gt;/go/src/.git/&lt;/code&gt; 中的文件，添加了一个窃取信息的木马。root 用户在 &lt;code&gt;/go/src&lt;/code&gt; 中执行 git status 时，就会以 root 用户执行这个木马，造成信息泄漏。&lt;/p&gt;
&lt;p&gt;所以 Git 在 &lt;a href=&#34;https://github.com/git/git/commit/8959555cee7ec045958f9b6dd62e541affb7e7d9&#34;&gt;895955&lt;/a&gt; 中添加了安全检查，确保执行 git 命令的用户和 &lt;code&gt;.git/&lt;/code&gt; 目录的 owner 是同一个人。&lt;/p&gt;
&lt;p&gt;如果用户信任某个目录，不想添加这种检查，可以修改配置 &lt;code&gt;safe.directory&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global --add safe.directory /some/repo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么在 &lt;code&gt;/some/repo&lt;/code&gt; 中执行 git 命令时，就不会检查文件 owner 了。&lt;/p&gt;
&lt;h2 id=&#34;解决-docker-build-失败的方案&#34;&gt;解决 docker build 失败的方案&lt;/h2&gt;
&lt;h3 id=&#34;添加--buildvcsfalse-选项&#34;&gt;添加 -buildvcs=false 选项&lt;/h3&gt;
&lt;p&gt;修改 build 命令，加上 &lt;code&gt;-buildvcs=false&lt;/code&gt; 选项，这样 go 不会收集 vcs 信息，也就不会遇到 git 的错误了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;RUN go build -buildvcs=false .
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改执行-go-build-的用户&#34;&gt;修改执行 go build 的用户&lt;/h3&gt;
&lt;p&gt;修改执行 build 命令的用户，这样也可以 build 成功&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM golang:1.18-buster

RUN sed -i &amp;#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&amp;#39; /etc/apt/sources.list
RUN apt-get update &amp;amp;&amp;amp; apt-get -yq install sudo &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*;

RUN git clone https://github.com/bwangelme/rdcdemo.git /go/src/
RUN /usr/sbin/useradd \
        --user-group \
        --create-home \
        --uid 1001 --shell &amp;#39;/bin/bash&amp;#39; \
        bwangel &amp;amp;&amp;amp; \
    chown bwangel:bwangel -R /go/src

WORKDIR /go/src/
RUN su - bwangel bash -c &amp;#34;cd /go/src; /usr/local/go/bin/go env; /usr/local/go/bin/go build -v .&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-中添加-safe-directory-的配置&#34;&gt;Git 中添加 safe directory 的配置&lt;/h3&gt;
&lt;p&gt;将代码所在目录 &lt;code&gt;/go/src&lt;/code&gt; 设置成 &lt;code&gt;safe.directory&lt;/code&gt;, 这样 git 执行时就不会出错了，也可以 build 成功。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM golang:1.18-buster

RUN sed -i &amp;#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&amp;#39; /etc/apt/sources.list
RUN apt-get update &amp;amp;&amp;amp; apt-get -yq install sudo &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*;

RUN git clone https://github.com/bwangelme/rdcdemo.git /go/src/
RUN /usr/sbin/useradd \
        --user-group \
        --create-home \
        --uid 1001 --shell &amp;#39;/bin/bash&amp;#39; \
        bwangel &amp;amp;&amp;amp; \
    chown bwangel:bwangel -R /go/src

WORKDIR /go/src/
RUN git config --global --add safe.directory /go/src
RUN go build .
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;safe.directory 只负责一个目录，不会关心子目录中的 git 仓库&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;*&lt;/code&gt; 可以让所有仓库忽略 safe.directory 的检查&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global --add safe.directory &amp;#39;*&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;go-install-时遇到的相似问题&#34;&gt;go install 时遇到的相似问题&lt;/h2&gt;
&lt;p&gt;当 GOPATH 目录的 owner 是 bwangel， 使用 root 用户运行 &lt;code&gt;go install&lt;/code&gt; 安装私有仓库的命令时，也会遇到相同的问题。&lt;/p&gt;
&lt;p&gt;比较有迷惑性的是，&lt;code&gt;go install&lt;/code&gt;显示的错误是 &lt;code&gt;fatal: &#39;origin&#39; does not appear to be a git repository&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;表面上看起来，这是下载的 git 仓库找不到 origin 这个 remote。但我们加上 &lt;code&gt;-x -v&lt;/code&gt; 参数，输出一下详细的步骤，就能找到原因了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@551114e99eea:/go# go install -x -v github.private.repo/org/repo/cmd/dag@latest
# get https://github.private.repo/?go-get=1
# get https://github.private.repo/org?go-get=1
# get https://github.private.repo/org/repo/cmd?go-get=1
# get https://github.private.repo/org/repo/cmd/dag?go-get=1
# get https://github.private.repo/org/repo?go-get=1
# get https://github.private.repo/org/repo/cmd?go-get=1: 200 OK (0.103s)
# get https://github.private.repo/org/repo?go-get=1: 200 OK (0.103s)
# get https://github.private.repo/org/repo/cmd/dag?go-get=1: 200 OK (0.103s)
get &amp;#34;github.private.repo/org/repo/cmd&amp;#34;: found meta tag vcs.metaImport{Prefix:&amp;#34;github.private.repo/org/repo&amp;#34;, VCS:&amp;#34;git&amp;#34;, RepoRoot:&amp;#34;https://github.private.repo/org/repo.git&amp;#34;} at //github.private.repo/org/repo/cmd?go-get=1
get &amp;#34;github.private.repo/org/repo/cmd&amp;#34;: verifying non-authoritative meta tag
get &amp;#34;github.private.repo/org/repo/cmd/dag&amp;#34;: found meta tag vcs.metaImport{Prefix:&amp;#34;github.private.repo/org/repo&amp;#34;, VCS:&amp;#34;git&amp;#34;, RepoRoot:&amp;#34;https://github.private.repo/org/repo.git&amp;#34;} at //github.private.repo/org/repo/cmd/dag?go-get=1
get &amp;#34;github.private.repo/org/repo/cmd/dag&amp;#34;: verifying non-authoritative meta tag
# get https://github.private.repo/org/repo?go-get=1
get &amp;#34;github.private.repo/org/repo&amp;#34;: found meta tag vcs.metaImport{Prefix:&amp;#34;github.private.repo/org/repo&amp;#34;, VCS:&amp;#34;git&amp;#34;, RepoRoot:&amp;#34;https://github.private.repo/org/repo.git&amp;#34;} at //github.private.repo/org/repo?go-get=1
mkdir -p /go/pkg/mod/cache/vcs # git3 https://github.private.repo/org/repo.git
# lock /go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92.lock# /go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92 for git3 https://github.private.repo/org/repo.git
cd /go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92; git ls-remote -q origin
0.003s # cd /go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92; git ls-remote -q origin
# get https://github.private.repo/org/repo.git
# get https://github.private.repo/org/repo?go-get=1: 200 OK (0.040s)
# get https://github.private.repo/?go-get=1: 200 OK (0.154s)
# get https://github.private.repo/org?go-get=1: 200 OK (0.276s)
# get https://github.private.repo/org/repo.git: 200 OK (0.171s)
go: github.private.repo/org/repo/cmd/dag@latest: module github.private.repo/org/repo/cmd/dag: git ls-remote -q origin in /go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92: exit status 128:
        fatal: &amp;#39;origin&amp;#39; does not appear to be a git repository
        fatal: Could not read from remote repository.

        Please make sure you have the correct access rights
        and the repository exists.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 go install 执行过程中，会首先下载仓库到 &lt;code&gt;/go/pkg/mod/cache/vcs/a1b9ef7e71cba11b98501177ca2d4f9fd012c258b967f915f68ee79a228ddf92&lt;/code&gt; 目录中&lt;/p&gt;
&lt;p&gt;然后在该目录执行 &lt;code&gt;git ls-remote -q origin&lt;/code&gt; 获取 tag 列表，并得到最新的 repo tag.&lt;/p&gt;
&lt;p&gt;因为 &lt;code&gt;safe.directory&lt;/code&gt; 的检查，导致 &lt;code&gt;git ls-remote -q origin&lt;/code&gt; 执行失败，git 认为 origin remote 不存在，才会显示异常 &lt;code&gt;fatal: &#39;origin&#39; does not appear to be a git repository&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;go install 安装 github 上的仓库时，就不会遇到上述问题，因为安装 github 的仓库是从 GOPROXY 上获取的缓存文件，不需要经过 git 来查询 tag 了，不执行 git 命令，也就不会遇到上述问题了。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tip.golang.org/doc/go1.18&#34;&gt;go 1.18 release note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@thecodinganalyst/git-detect-dubious-ownership-in-repository-e7f33037a8f&#34;&gt;Git detect dubious ownership in repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://idushu.com/%E8%A7%A3%E5%86%B3-golang-%E5%8D%87%E7%BA%A7%E5%88%B0-1-18-%E7%89%88%E6%9C%AC%E5%90%8E%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%9E%84%E5%BB%BA%E6%97%B6%E5%87%BA%E7%8E%B0-error-obtaining-vcs-status-exi/&#34;&gt;解决 Golang 升级到 1.18+ 版本后在容器中构建时出现 error obtaining VCS status: exit status 128 的问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Git-submodule</title>
      <link>https://bwangel.me/docs/tools/git-submodule/</link>
      <pubDate>Mon, 11 Apr 2016 07:18:43 +0000</pubDate>
      
      <guid>https://bwangel.me/docs/tools/git-submodule/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git submodule&lt;/code&gt;就是git主仓库在本仓库的配置中记录着子模块仓库对应的名字，路径，远端url，然后创建一个特殊文件去记录子模块仓库目前的&lt;code&gt;commit-id&lt;/code&gt;，每次更新子模块就是通过远端路径和&lt;code&gt;commit-id&lt;/code&gt;来进行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考文章&#34;&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kafeitu.me/git/2012/03/27/git-submodule.html&#34;&gt;Git Submodule使用完整教程 - 咖啡兔 - HenryYan&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-子模块的原理&#34;&gt;Git 子模块的原理&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;.git/config&lt;/code&gt;和&lt;code&gt;.gitmodules&lt;/code&gt;中记录的子模块仓库的远端地址和路径，然后使用一个特殊的模式为&lt;code&gt;160000&lt;/code&gt;的文件来记录子模块仓库当前的&lt;code&gt;commit id&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-子模块的添加&#34;&gt;Git 子模块的添加&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add origin:/submd/repos/lib2.git libs/lib2 &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 添加远端origin上的仓库lib2到当前仓库的libs/lib2位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;git-子模块的初始化及更新&#34;&gt;Git 子模块的初始化及更新&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git submodule init&lt;/code&gt;会初始化当前仓库中存在的子模块(根据.gitmodules文件去查找子模块)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule update&lt;/code&gt;就是更新当前仓库存在子模块，拉取最新代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule update&lt;/code&gt;是根据父仓库中记录的子模块仓库的&lt;code&gt;commit-id&lt;/code&gt;去更新子模块仓库，如果子模块仓库commit了但是父仓库并没有&lt;code&gt;add&lt;/code&gt;，那么&lt;code&gt;git submodule update&lt;/code&gt;会还原子模块仓库的提交。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git submodule foreach &amp;lt;command&amp;gt;&lt;/code&gt; 进入到每个子模块，然后执行&lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;命令&lt;/p&gt;
&lt;h2 id=&#34;git-子模块的移除&#34;&gt;Git 子模块的移除&lt;/h2&gt;
&lt;p&gt;执行以下命令删除 Git 子模块，相关内容请参考&lt;a href=&#34;http://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule/21211232#21211232&#34;&gt;Stack Overflow&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rm the_submodule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf .git/modules/the_submodule
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
