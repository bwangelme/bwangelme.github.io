<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – Vim</title>
    <link>https://bwangel.me/tags/vim/</link>
    <description>Recent content in Vim on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sun, 26 Mar 2017 17:19:11 +0000</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 简单聊聊Vim中的自定义快捷键</title>
      <link>https://bwangel.me/docs/editor/vim-map/</link>
      <pubDate>Sun, 26 Mar 2017 17:19:11 +0000</pubDate>
      
      <guid>https://bwangel.me/docs/editor/vim-map/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Vim中几个&lt;code&gt;Map&lt;/code&gt;命令的区别&lt;/li&gt;
&lt;li&gt;分享几个自定义的快捷键&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;平常在Vim中自定义快捷键，使用的都是&lt;code&gt;map&lt;/code&gt;命令，但最近发现自定义快捷键命令还有好多，如&lt;code&gt;noremap&lt;/code&gt;， &lt;code&gt;nmap&lt;/code&gt;，&lt;code&gt;vmap&lt;/code&gt;等等。所以就想写一篇关于Vim中自定义快捷键的文章，来总结一些Vim中的自定义快捷键的命令和他们的命名方式。&lt;/p&gt;
&lt;h2 id=&#34;与自定义快捷键相关的四个系列命令&#34;&gt;与自定义快捷键相关的四个系列命令&lt;/h2&gt;
&lt;h3 id=&#34;map系列命令&#34;&gt;map系列命令&lt;/h3&gt;
&lt;p&gt;这个命令的声明如下: &lt;code&gt;:map {lhs} {rhs}&lt;/code&gt;。这个命令就是将&lt;code&gt;{lhs}&lt;/code&gt;代表的按键映射成&lt;code&gt;{rhs}&lt;/code&gt;所代表的按键。例如&lt;code&gt;map L $&lt;/code&gt;就是将&lt;code&gt;$&lt;/code&gt;键映射成&lt;code&gt;L&lt;/code&gt;。此外需要注意的是&lt;code&gt;map&lt;/code&gt;命令定义的快捷键是可以嵌套的，例如下面这样的命令:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;L&lt;/span&gt; $&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;yL&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就是将&lt;code&gt;Y&lt;/code&gt;按键映射成了&lt;code&gt;y$&lt;/code&gt;按键。&lt;/p&gt;
&lt;h3 id=&#34;noremap系列命令&#34;&gt;noremap系列命令&lt;/h3&gt;
&lt;p&gt;这个命令的声明如下: &lt;code&gt;:no[remap]  {lhs} {rhs}&lt;/code&gt;，顾名思义，就是不可以重新映射的命令。这个命令和&lt;code&gt;map&lt;/code&gt;命令类似，不过它所定义的命令不可以被重新映射，例如下面的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;L&lt;/span&gt; $&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;yL&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时我们映射的&lt;code&gt;Y&lt;/code&gt;按键的效果就不会和&lt;code&gt;y$&lt;/code&gt;按键的效果相同了。此命令的主要作用是为了防止按键重新定义时出现冲突，所以一般推荐使用此命令来映射快捷键。&lt;/p&gt;
&lt;h3 id=&#34;unmap系列命令&#34;&gt;unmap系列命令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;unmap&lt;/code&gt;，顾名思义，就是用来取消&lt;strong&gt;所在模式&lt;/strong&gt;下快捷键的定义(关于&lt;strong&gt;模式&lt;/strong&gt;我们下一小结会将)。&lt;/p&gt;
&lt;h3 id=&#34;mapclear系命令&#34;&gt;mapclear系命令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mapclear&lt;/code&gt;，清除所在模式下定义的所有快捷键。&lt;/p&gt;
&lt;h2 id=&#34;自定义快捷键相关的六种模式&#34;&gt;自定义快捷键相关的六种模式&lt;/h2&gt;
&lt;p&gt;在Vim中，共有六种模式，不同的定义快捷键的命令生效的模式不同，这六种模式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;ormal Mode: 即Vim的普通模式，我们打开Vim后进入的第一个模式即此模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;isual Mode: 即Vim的&lt;code&gt;Visual&lt;/code&gt;模式，我们在选中了一定的文本之后(通过&lt;code&gt;v&lt;/code&gt;或者&lt;code&gt;V&lt;/code&gt;命令)即进入此模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;elect Mode: 这种模式和&lt;code&gt;Visual&lt;/code&gt;模式相似，不过输入的文本都会替换选中的文本。在普通模式下，通过鼠标选中或者使用&lt;code&gt;gH&lt;/code&gt;命令都可以进入此模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt;perator-pending Mode: 当我们输入一个&lt;a href=&#34;http://vimdoc.sourceforge.net/htmldoc/motion.html#operator&#34;&gt;操作符&lt;/a&gt;后(例如，&lt;code&gt;d&lt;/code&gt;，&lt;code&gt;y&lt;/code&gt;，&lt;code&gt;c&lt;/code&gt;等等)，就会进入此模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;nsert Mode: 即Vim的插入模式，普通模式下我们输入&lt;code&gt;i&lt;/code&gt;(或者&lt;code&gt;s&lt;/code&gt;,&lt;code&gt;a&lt;/code&gt;等等)就会进入此模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;ommand-line Mode: 命令行模式，我们在普通模式下输入&lt;code&gt;:&lt;/code&gt;或者&lt;code&gt;/&lt;/code&gt;等就会进入此模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令模式对应表&#34;&gt;命令模式对应表&lt;/h3&gt;
&lt;p&gt;下表表示了每个自定义快捷键的命令和其对应的生效模式，需要注意的是&lt;code&gt;Lang-Arg&lt;/code&gt;并不是一种新的模式，而是表示了这样一种情况。当我们键入一个字符的时候，它是缓冲区中文本的一部分，而不是一个Vim命令。上面这句话我翻译自Vim文档，我感觉自己也没有很是搞懂，所以还是把原文贴出了吧(参见&lt;code&gt;:help language-mapping&lt;/code&gt;)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generally: Whenever a character is to be typed that is part of the text in the
buffer, not a Vim command character.  &amp;ldquo;Lang-Arg&amp;rdquo; isn&amp;rsquo;t really another mode,
it&amp;rsquo;s just used here for this situation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;map&lt;/code&gt;系命令&lt;/th&gt;
&lt;th&gt;&lt;code&gt;noremap&lt;/code&gt;系命令&lt;/th&gt;
&lt;th&gt;&lt;code&gt;unmap&lt;/code&gt;系命令&lt;/th&gt;
&lt;th&gt;&lt;code&gt;mapclear&lt;/code&gt;系命令&lt;/th&gt;
&lt;th&gt;生效模式&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:map&lt;/td&gt;
&lt;td&gt;:noremap&lt;/td&gt;
&lt;td&gt;:unmap&lt;/td&gt;
&lt;td&gt;:mapc[lear]&lt;/td&gt;
&lt;td&gt;Normal, Visual, Select, Operator-pending&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nmap&lt;/td&gt;
&lt;td&gt;:nnoremap&lt;/td&gt;
&lt;td&gt;:nunmap&lt;/td&gt;
&lt;td&gt;:nmapc[lear]&lt;/td&gt;
&lt;td&gt;Normal&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:vmap&lt;/td&gt;
&lt;td&gt;:vnoremap&lt;/td&gt;
&lt;td&gt;:vunmap&lt;/td&gt;
&lt;td&gt;:vmapc[lear]&lt;/td&gt;
&lt;td&gt;Visual and Select&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:smap&lt;/td&gt;
&lt;td&gt;:snoremap&lt;/td&gt;
&lt;td&gt;:sunmap&lt;/td&gt;
&lt;td&gt;:smapc[lear]&lt;/td&gt;
&lt;td&gt;Select&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:xmap&lt;/td&gt;
&lt;td&gt;:xnoremap&lt;/td&gt;
&lt;td&gt;:xunmap&lt;/td&gt;
&lt;td&gt;:xmapc[lear]&lt;/td&gt;
&lt;td&gt;Visual&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:omap&lt;/td&gt;
&lt;td&gt;:onoremap&lt;/td&gt;
&lt;td&gt;:ounmap&lt;/td&gt;
&lt;td&gt;:omapc[lear]&lt;/td&gt;
&lt;td&gt;Operator-pending&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:map!&lt;/td&gt;
&lt;td&gt;:noremap!&lt;/td&gt;
&lt;td&gt;:unmap!&lt;/td&gt;
&lt;td&gt;:mapc[lear]!&lt;/td&gt;
&lt;td&gt;Insert and Command-line&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:imap&lt;/td&gt;
&lt;td&gt;:inoremap&lt;/td&gt;
&lt;td&gt;:iunmap&lt;/td&gt;
&lt;td&gt;:imapc[lear]&lt;/td&gt;
&lt;td&gt;Insert&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:lmap&lt;/td&gt;
&lt;td&gt;:lnoremap&lt;/td&gt;
&lt;td&gt;:lunmap&lt;/td&gt;
&lt;td&gt;:lmapc[lear]&lt;/td&gt;
&lt;td&gt;Insert, Command-line, Lang-Arg&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:cmap&lt;/td&gt;
&lt;td&gt;:cnoremap&lt;/td&gt;
&lt;td&gt;:cunmap&lt;/td&gt;
&lt;td&gt;:cmapc[lear]&lt;/td&gt;
&lt;td&gt;Command-line&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过观察上面这些命令的前缀，我们可以发现，命令前缀和生效的模式有关。例如，&lt;code&gt;v&lt;/code&gt;表示&lt;code&gt;Visual和Select&lt;/code&gt;模式，&lt;code&gt;s&lt;/code&gt;表示&lt;code&gt;Select&lt;/code&gt;模式，&lt;code&gt;c&lt;/code&gt;表示&lt;code&gt;Command-line&lt;/code&gt;模式，等等。&lt;/p&gt;
&lt;h2 id=&#34;分享两个我自己定义的快捷键&#34;&gt;分享两个我自己定义的快捷键&lt;/h2&gt;
&lt;p&gt;Ok，扯了那么多和自定义快捷键相关的东西，接下来我和大家分享几个我自定义的快捷键吧，感觉用起来很爽，希望对大家有帮助。&lt;/p&gt;
&lt;h3 id=&#34;tab键映射成搜索&#34;&gt;&lt;del&gt;Tab键映射成搜索&lt;/del&gt;&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;搜索无疑是一个使用频率非常高的快捷键，但在原始的Vim中使用的却是&lt;code&gt;/&lt;/code&gt;或者&lt;code&gt;?&lt;/code&gt;，当要使用搜索功能的时候，我的右手要离开HomeRow(就是&lt;strong&gt;爱上对方过后就哭了&lt;/strong&gt;那一行)，然后使用中指或者食指去按&lt;code&gt;/&lt;/code&gt;，感觉虽然也可以用右手小拇指去按&lt;code&gt;/&lt;/code&gt;，但实在是太费劲。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;所以我就把&lt;code&gt;/&lt;/code&gt;映射成了&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;，&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;键在普通模式下基本用不到，同时左手小拇指又非常容易按到，感觉一下子方便了许多。映射命令如下：&lt;/del&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;#34; 映射/为&amp;lt;Tab&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;noremap&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Tab&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; /&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;大家可以看到，我这里使用的是&lt;code&gt;noremap&lt;/code&gt;映射的(防止以后再来映射和&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;键相关的组合键时出现错误)，同时，这个命令生效的模式是&lt;code&gt;Normal&lt;/code&gt;，&lt;code&gt;Visual&lt;/code&gt;，&lt;code&gt;Select&lt;/code&gt;，&lt;code&gt;Operator-pending&lt;/code&gt;。这样我不仅可以在普通模式下搜索，也可以在选择文本(Visual)，删除文本(通过&lt;code&gt;d&lt;/code&gt;命令)时进行搜索。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;后来我才发现，&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;C-i&amp;gt;&lt;/code&gt;的keycode是一样的，&lt;a href=&#34;http://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim&#34;&gt;无法分别映射&lt;/a&gt;，所以将&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;映射为搜索按键会影响到&lt;code&gt;&amp;lt;C-i&amp;gt;&lt;/code&gt;的功能，所以还是先删除掉吧。&lt;/p&gt;
&lt;h3 id=&#34;快速定位当前文件&#34;&gt;快速定位当前文件&lt;/h3&gt;
&lt;p&gt;这条映射是我在&lt;a href=&#34;https://book.douban.com/subject/25869486/&#34;&gt;《VIM 实用技巧》&lt;/a&gt;中看到的，感觉很好用，特意来分享给大家。此映射命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;#34; 将%:h映射为%%，%:h的功能是显示当前缓冲区文件的相对路径&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cnoremap&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; %% &lt;span style=&#34;color:#000&#34;&gt;getcmdtype&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; ? &lt;span style=&#34;color:#000&#34;&gt;expand&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;%:h&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;.&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;%%&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条命令比较复杂，首先&lt;code&gt;cnoremap&lt;/code&gt;表示在命令行模式下进行映射，&lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt;表示将映射命令的右边的参数当做一个表达式来对待(详见: &lt;code&gt;:help :map-&amp;lt;expr&amp;gt;&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%%&lt;/code&gt;就是我们定义的快捷键，&lt;code&gt;getcmdtype() == &#39;:&#39; ? expand(&#39;%:h&#39;).&#39;/&#39; : &#39;%%&#39;&lt;/code&gt;就是我们要执行的表达式，此命令的含义就是每当我们在命令行模式下输入&lt;code&gt;%%&lt;/code&gt;，就会得到表达式&lt;code&gt;getcmdtype() == &#39;:&#39; ? expand(&#39;%:h&#39;).&#39;/&#39; : &#39;%%&#39;&lt;/code&gt;运算的结果。&lt;/p&gt;
&lt;p&gt;接着我们再来分析一下这个表达式，&lt;code&gt;getcmdtype() == &#39;:&#39; ? expand(&#39;%:h&#39;).&#39;/&#39; : &#39;%%&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先来看调用的两个函数，&lt;code&gt;getcmdtype&lt;/code&gt;表示获取当前命令行模式的类型，&lt;code&gt;:&lt;/code&gt;表示是Ex-Mode，就是在普通模式下输入&lt;code&gt;:&lt;/code&gt;进入的模式，此外其他的返回结果参见&lt;code&gt;:help getcmdtype()&lt;/code&gt;。
&lt;code&gt;expand()&lt;/code&gt;函数表示对通配符进行扩展，其中传入的参数为&lt;code&gt;%&lt;/code&gt;和&lt;code&gt;:h&lt;/code&gt;，&lt;code&gt;%&lt;/code&gt;表示当前缓冲区文件，&lt;code&gt;:h&lt;/code&gt;相当于一个函数，传入一个文件参数，返回文件所在的文件夹(相当于Python中的&lt;code&gt;os.path.dirname()&lt;/code&gt;)，我们可以看到&lt;code&gt;expand(&#39;%:h&#39;)&lt;/code&gt;函数的功能就是返回当前缓冲区文件所在的路径。&lt;/p&gt;
&lt;p&gt;整体来看这个表达式的话，就是一个三元运算符，如果当前模式是Ex-Mode的话，返回当前缓冲区文件所在的文件夹，否则的话返回&lt;code&gt;%%&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;有待考证和完善之处&#34;&gt;有待考证和完善之处&lt;/h2&gt;
&lt;p&gt;写文章之前，我觉得我应该已经了解了Vim的&lt;code&gt;map&lt;/code&gt;相关的命令，但是写完以后，发现还是有很多疑问，写到最后发现还有新东西自己没有涉及，这里先记录下来，以待以后完善：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;的递归定义的用法。我看到&lt;code&gt;:help :map&lt;/code&gt;文档中说，**This allows for nested and recursive use of mappings.**也就是说&lt;code&gt;map&lt;/code&gt;可以进行递归定义的，只是不知道怎么用，递归出口在哪？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;命令还有一个&lt;code&gt;map-&amp;lt;expr&amp;gt;&lt;/code&gt;的用法，这次还没有将，以后加上。&lt;/li&gt;
&lt;li&gt;关于文档中&lt;code&gt;Lang-arg&lt;/code&gt;还不是很懂。&lt;/li&gt;
&lt;/ol&gt;
      </description>
    </item>
    
  </channel>
</rss>
