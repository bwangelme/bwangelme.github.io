<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – HTTPS</title>
    <link>https://bwangel.me/tags/https/</link>
    <description>Recent content in HTTPS on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Sun, 29 Nov 2020 13:25:07 +0800</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/https/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 如何生成自签名 HTTPS 证书</title>
      <link>https://bwangel.me/docs/http/https-generate-cert/</link>
      <pubDate>Sun, 29 Nov 2020 13:25:07 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/http/https-generate-cert/</guid>
      <description>
        
        
        &lt;hr&gt;
&lt;h2 id=&#34;ca-机构是什么&#34;&gt;CA 机构是什么&lt;/h2&gt;
&lt;p&gt;Certificate Authority，是一个公司或者组织，用于为实体(网站，Email 地址，公司或个人等)提供证书。通过证书认证这些实体。&lt;/p&gt;
&lt;p&gt;数字证书提供三方面的验证:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;身份验证(Authentication): 通过提供认证服务，来验证他颁发证书的实体。&lt;/li&gt;
&lt;li&gt;加密(Encryption): 提供加密方式，让通信双方在不可信的信道上通信。&lt;/li&gt;
&lt;li&gt;完整性验证(Integrity): 可以对文档进行签名，这样可以确保传输过程中文档不会被修改。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ca-机构的证书分类&#34;&gt;CA 机构的证书分类&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;证书类型&lt;/th&gt;
&lt;th&gt;单域名&lt;/th&gt;
&lt;th&gt;多域名&lt;/th&gt;
&lt;th&gt;泛域名&lt;/th&gt;
&lt;th&gt;多泛域名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DV&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OV&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EV&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;举例&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.bwangel.me&#34;&gt;www.bwangel.me&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;www.bwangel.me&lt;/code&gt;, &lt;code&gt;www.wbangel1.me&lt;/code&gt;, &lt;code&gt;www.langel.me&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;*.bwangel.me&lt;/td&gt;
&lt;td&gt;*.bwangel.me, *.fbangel2.me, *.wbngel.me&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不论是 DV，OV，还是EV证书，他们的加密效果都是一样的，其区别在于实体认证方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DV(Domain Validation)，面向个体用户，认证方式为向 whois 信息中的邮箱发送邮件进行验证。&lt;/li&gt;
&lt;li&gt;OV(Origanization Validation)，面向企业用户，证书在 DV 证书验证的基础上，还需要公司授权，CA 通过拨打信息库中的公司电话来确认&lt;/li&gt;
&lt;li&gt;EV(Extended Validation)，这类证书除了上述两个确认外，还需要公司提供的金融机构的开户许可证，要求十分严格。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OV 和 EV 证书相当昂贵，使用方可以为这些颁发出来的证书买保险，一旦 CA 提供的证书出现问题，一张证书的赔偿金可以达到 100w 刀以上。&lt;/p&gt;
&lt;h2 id=&#34;什么是证书申请文件csr&#34;&gt;什么是证书申请文件(CSR)&lt;/h2&gt;
&lt;p&gt;证书申请文件(Certificate Signing Request)，简写为 CSR。&lt;/p&gt;
&lt;p&gt;数字证书的核心，其实就是非对称加密，这需要开发者自己保护好私钥的安全。&lt;/p&gt;
&lt;p&gt;因此开发者在向 CA 申请证书的时候，开发者首先需要生成一个密钥对。开发者自己保管好私钥，然后将公钥和个人信息发送给 CA 机构，CA 机构通过公钥和你的个人信息最终签发数字证书。&lt;/p&gt;
&lt;p&gt;而 CSR 文件其实就是一个包含了用户公钥和个人信息的一个数据文件。用户产生出这个 CSR 文件，再把这个 CSR 文件发送给 CA 机构，CA 机构通过 CSR 中的内容来签发出数字证书。&lt;/p&gt;
&lt;h2 id=&#34;san-是什么&#34;&gt;SAN 是什么&lt;/h2&gt;
&lt;p&gt;证书中字段的说明，除了这些通用字段外，证书中还可以附加字段。SAN 就是附加的字段。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/C=&lt;/td&gt;
&lt;td&gt;Country&lt;/td&gt;
&lt;td&gt;GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/ST=&lt;/td&gt;
&lt;td&gt;State&lt;/td&gt;
&lt;td&gt;London&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/L=&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;London&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/O=&lt;/td&gt;
&lt;td&gt;Organization&lt;/td&gt;
&lt;td&gt;Global Security&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/OU=&lt;/td&gt;
&lt;td&gt;Organizational Unit&lt;/td&gt;
&lt;td&gt;IT Department&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/CN=&lt;/td&gt;
&lt;td&gt;Common Name&lt;/td&gt;
&lt;td&gt;example.com&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Subject Alternative Name ，多域名证书，令一个证书可以保护多个域名。&lt;/p&gt;
&lt;p&gt;Chrome 从58开始 只会检查证书的 SAN 字段，不再检查 Common Name 字段的域名，如果没有设置 SAN 字段，Chrome 连接时会报错 &lt;code&gt;net:ERR_CERT_COMMON_NAME_INVALID&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;chrome-连接-https-网站的常见错误&#34;&gt;Chrome 连接 HTTPS 网站的常见错误&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;net:ERR_CERT_AUTHORITY_INVALID&lt;/code&gt;: 浏览器不认服务器的证书，一般是因为给服务器签发证书的 CA 机构不在浏览器的信任列表中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net:ERR_CERT_COMMON_NAME_INVALID&lt;/code&gt;: Common Name 不匹配，即访问的域名和证书中的域名不匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何生成一张证书&#34;&gt;如何生成一张证书&lt;/h2&gt;
&lt;p&gt;大致流程是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义配置文件，生成 CA 机构的证书&lt;/li&gt;
&lt;li&gt;生成申请证书的 CSR 文件和私钥文件*pem (注意，一定要在配置文件中指定 SAN，否则 chrome 不认这个证书)&lt;/li&gt;
&lt;li&gt;利用CA证书对 CSR 文件进行签名，生成证书文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体步骤见: &lt;a href=&#34;https://github.com/bwangelme/Certs&#34;&gt;https://github.com/bwangelme/Certs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何设置浏览器信任-ca-机构&#34;&gt;如何设置浏览器信任 CA 机构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于Chrome 86.0.4240.198&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Settings -&amp;gt; Privacy and security -&amp;gt; Security -&amp;gt; Manage certificates -&amp;gt; Authorities -&amp;gt; Import 导入 CA 机构的 pem 文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Firefox 83.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preferences -&amp;gt; Privacy &amp;amp; Security -&amp;gt; Certificates -&amp;gt; View Certificates -&amp;gt; Authorities -&amp;gt; Import&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.barretlee.com/blog/2016/04/24/detail-about-ca-and-certs/&#34;&gt;细说 CA 和证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/66d84ca65f41&#34;&gt;什么是CSR文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shellhacks.com/create-csr-openssl-without-prompt-non-interactive/&#34;&gt;HowTo: Create CSR using OpenSSL Without Prompt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ningyu1.github.io/site/post/51-ssl-cert/&#34;&gt;Openssl生成自签名证书，简单步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ideawand.com/2017/11/22/build-certificate-that-support-Subject-Alternative-Name-SAN/&#34;&gt;使用OpenSSL生成含有Subject Alternative Name(SAN)的证书&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
      </description>
    </item>
    
  </channel>
</rss>
