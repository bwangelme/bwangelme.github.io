<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – Node.js</title>
    <link>https://bwangel.me/tags/node.js/</link>
    <description>Recent content in Node.js on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Fri, 06 May 2016 15:10:25 +0000</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: npm小记</title>
      <link>https://bwangel.me/docs/nodejs/npm%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Fri, 06 May 2016 15:10:25 +0000</pubDate>
      
      <guid>https://bwangel.me/docs/nodejs/npm%E5%B0%8F%E8%AE%B0/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于npm的小记，记录自己平常学习到的零碎知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;npm-ls&#34;&gt;npm ls&lt;/h2&gt;
&lt;h3 id=&#34;用法&#34;&gt;用法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    npm ls &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[[&lt;/span&gt;&amp;lt;@scope&amp;gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;&amp;lt;pkg&amp;gt; ...&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    别名: list, la, ll
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这条命令将会在stdout中打印出所有已经安装的包和他们的依赖包，以树形目录的形式打印出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位置参数是&lt;code&gt;name@version-range&lt;/code&gt;形式的标识符，它将会打印结果，只打印出命名包的路径中所含有的包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过加上-g参数来打印全局安装的包。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;npm-registry&#34;&gt;npm registry&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm模块仓库提供了一个查询服务，叫做registry。例如&lt;a href=&#34;https://registry.npmjs.org/&#34;&gt;https://registry.npmjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在网址后面跟上模块名即可以查询相关模块的信息。例如&lt;a href=&#34;https://registry.npmjs.org/react&#34;&gt;https://registry.npmjs.org/react&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在模块名后面还可以跟上版本号，例如&lt;a href=&#34;https://registry.npmjs.org/react/v0.14.6&#34;&gt;https://registry.npmjs.org/react/v0.14.6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回的JSON对象里面，有一个dist.tarball属性，是该版本压缩包的地址，将该压缩包解压，即可得到相关模块的源码，npm即通过这种方式来安装模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;npm-缓存&#34;&gt;npm 缓存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm的缓存目录在Linux下是$HOME/.npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过&lt;code&gt;npm config get cache&lt;/code&gt;获取缓存目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过&lt;code&gt;npm cache ls&lt;/code&gt;查看当前缓存的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过&lt;code&gt;npm cache clean&lt;/code&gt;来清除缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;{cache}/{hostname}/{path}/.cache.json&lt;/code&gt;文件中，存放了&lt;code&gt;{path}&lt;/code&gt;这个模块的版本信息，以及模块最近修改时间和最新一次请求时服务器返回的ETag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于一些不关键的操作(例如&lt;code&gt;npm search&lt;/code&gt;和&lt;code&gt;npm view&lt;/code&gt;)，npm会先查看.cache.json里模块的最近更新时间，跟当前时间的差距，看是不是在可接受的范围内。如果是，就不再向远端服务器请求，而是直接返回.cache.json的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: NodeJS 笔记</title>
      <link>https://bwangel.me/docs/nodejs/note/</link>
      <pubDate>Sun, 10 Apr 2016 10:56:54 +0000</pubDate>
      
      <guid>https://bwangel.me/docs/nodejs/note/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;阮一峰的&lt;a href=&#34;http://javascript.ruanyifeng.com/#toc10&#34;&gt;Node.js&lt;/a&gt;教程笔记&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nodejs概述&#34;&gt;Node.js概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Node约定，如果需要某个回调函数作为参数，则回调函数是最后一个参数。&lt;/li&gt;
&lt;li&gt;回调函数本身的第一个参数，约定为上一步传入的错误对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模块化结构&#34;&gt;模块化结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个模块通过module.exports来导出对象，函数，变量等&lt;/li&gt;
&lt;li&gt;其他模块通过require函数来获取某个模块倒数的exports&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模块的加载机制&#34;&gt;模块的加载机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CommonJS模块的加载机制是，输入是输出值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;packagejson文件&#34;&gt;package.json文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scripts&lt;/code&gt;字段定义通过&lt;code&gt;npm run&lt;/code&gt;运行的命令&lt;/p&gt;
      </description>
    </item>
    
  </channel>
</rss>
