<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – Algorithm</title>
    <link>https://bwangel.me/tags/algorithm/</link>
    <description>Recent content in Algorithm on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 29 Aug 2018 23:34:29 +0800</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 哈希表学习笔记</title>
      <link>https://bwangel.me/docs/algo/hash/</link>
      <pubDate>Wed, 29 Aug 2018 23:34:29 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/algo/hash/</guid>
      <description>
        
        
        &lt;h2 id=&#34;解决冲突的两种方法&#34;&gt;解决冲突的两种方法&lt;/h2&gt;
&lt;h3 id=&#34;分离连接法&#34;&gt;分离连接法&lt;/h3&gt;
&lt;p&gt;散列表的装填因子（load factor）为散列表中元素的个数与散列表大小的比值。表的大小并不重要，装填因子才是最重要的。
分离连接散列的一般法则是使得表的大小尽量与预料的元素个数差不多（换句话说，装填因子 ≈ 1）&lt;/p&gt;
&lt;h3 id=&#34;开放定址法&#34;&gt;开放定址法&lt;/h3&gt;
&lt;p&gt;在开放定址散列算法系统中，如果有冲突发生，那么就要尝试选择另外的单元。&lt;code&gt;h0(x)&lt;/code&gt;, &lt;code&gt;h1(x)&lt;/code&gt;, &amp;hellip; 逐个尝试&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;hi(x) = (hash(x) + F(i)) mod tableSize&lt;/code&gt;，其中F(i)是解决冲突的方法。一般来说，开放定址法的散列算法其装填因子 lambda &amp;lt;= 0.5&lt;/p&gt;
&lt;h2 id=&#34;定理证明&#34;&gt;定理证明&lt;/h2&gt;
&lt;h3 id=&#34;将乘法运算转换成位运算&#34;&gt;将乘法运算转换成位运算&lt;/h3&gt;
&lt;p&gt;令 $F(0) = 0$ 且 $F(i) = F(i - 1) + 2 \cdot i - 1$，则 $F(i) = i ^ 2$。&lt;/p&gt;
&lt;p&gt;证明过程:&lt;/p&gt;
&lt;p&gt;$$
F(0) = 0
$$
$$
F(1) = F(0) + (2 \cdot 1) - 1
$$
$$
F(0) + F(1) + F(2) + &amp;hellip; + F(i) = 0 + F(0) + (2 \cdot 1) - 1 + (2 \cdot 2) - 1 + &amp;hellip; + F(i-1) + (2 \cdot i) - 1
$$
$$
F(i) = (2 \cdot 1) - 1 + (2 \cdot 2) - 1 + &amp;hellip; + (2 \cdot i) - 1
$$
$$
F(i) = 1 + 3 + 5 + &amp;hellip; + 2 \cdot i - 1
$$
$$
F(i) = \frac{1+2 \cdot i-1}{2} = i^2
$$&lt;/p&gt;
&lt;p&gt;这样就将一个乘法运算转换成了一个位移运算，提高了效率。&lt;/p&gt;
&lt;h3 id=&#34;平方探测法总可向空间大于12的哈希表中插入元素&#34;&gt;平方探测法总可向空间大于1/2的哈希表中插入元素&lt;/h3&gt;
&lt;h4 id=&#34;相关定理&#34;&gt;相关定理：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;$(a+b) \mod n = (a \mod n + b \mod n) \mod n$&lt;/li&gt;
&lt;li&gt;$(a \mod n) \mod n = a \mod n$&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定理说明&#34;&gt;定理说明&lt;/h4&gt;
&lt;p&gt;如果使用平方探测，且表的大小是素数，那么当表至少有一半为空的时候，总能够插入一个新的元素&lt;/p&gt;
&lt;h4 id=&#34;证明&#34;&gt;证明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;前提说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈希表大小为&lt;code&gt;ts&lt;/code&gt;，我们向其中插入了两个冲突的元素x和y。这两个元素冲突重试的次数分别是&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;。其中：&lt;/p&gt;
&lt;p&gt;$$
0 &amp;lt; i, j &amp;lt; \frac{ts}{2}  (小于 \frac{ts}{2} 意味着表中还有多余一半的空间可以使用)
$$
$$
P_x = (Hash(x) + i^2) \mod ts (x位置)
$$
$$
P_y = (Hash(y) + j^2) \mod ts (y位置)
$$
$$
Hash(x) \mod {ts} = Hash(y) \mod {ts} =&amp;gt; (Hash(x) - Hash(y)) \mod ts = 0
$$
$$
ts 是素数
$$&lt;/p&gt;
&lt;p&gt;试证明，如果$i \neq j$，那么$P_x \neq P_y$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证明过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设上述定理是不成立的，则$i \neq j$时，$P_x = P_y$&lt;/p&gt;
&lt;p&gt;$$
P_x = P_y
$$
$$
(Hash(x) + i^2) \mod ts = (Hash(y) + j^2) \mod ts
$$
$$
(Hash(x) + i^2) \mod ts - (Hash(y) + j^2) \mod ts = 0 \mod ts
$$
$$
(Hash(x) + i^2 - Hash(y) - j^2) \mod ts = 0
$$
$$
[(Hash(x) - Hash(y)) \mod ts + (i^2 - j^2) \mod ts] \mod ts = 0
$$
$$
(i^2 - j^2) \mod ts = 0
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为$i, j &amp;lt; \frac{ts}{2}$，所以$(i^2 - j^2) &amp;lt;= \frac{(ts-1)^2}{4} - \frac{(ts-2)^2}{4} &amp;lt;= \frac{ts}{2} - \frac{3}{4} &amp;lt; ts$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为&lt;code&gt;ts是素数&lt;/code&gt;，所以$(i^2 - j^2) = 0$，可得$i=\pm j$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为$0 &amp;lt; i, j$，所以$i = j$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与已知矛盾，故可得当$i \neq j$时，$P_x \neq P_y$。&lt;/p&gt;
&lt;p&gt;可证明 &lt;strong&gt;如果使用平方探测，且表的大小是素数，那么当表至少有一半为空的时候，总能够插入一个新的元素&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;额外说明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据 $K^2 \cdot [(ts - 1)^2 - (ts - 2)^2] &amp;lt; ts$可得$ K &amp;lt; \frac{\sqrt{3} \cdot ts}{3}$，&lt;code&gt;i, j&lt;/code&gt;更精确的范围是$0 &amp;lt; i, j &amp;lt; \frac{\sqrt{3} \cdot ts}{3}$。&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 变态跳台阶问题的解题思路</title>
      <link>https://bwangel.me/docs/algo/jump-stairs/</link>
      <pubDate>Sun, 08 Jul 2018 14:46:42 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/algo/jump-stairs/</guid>
      <description>
        
        
        &lt;p&gt;简介：本文主要记录了 变态跳台阶问题 的推导过程&lt;/p&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;
&lt;h3 id=&#34;问题转换&#34;&gt;问题转换&lt;/h3&gt;
&lt;p&gt;这个问题我们可以转换思路，将其转换成求树的节点0的个数的题目。&lt;/p&gt;
&lt;p&gt;假设存在一棵树，它的根节点是N，它的子节点从左往右依次为 n-1, n-2, &amp;hellip; 直到0。&lt;/p&gt;
&lt;p&gt;同理，根节点子节点的子节点也遵循这样的规律，0节点没有子节点。请问在这棵树中，0节点一共有多少个？&lt;/p&gt;
&lt;p&gt;根节点为3的树如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2018-04-08-100136.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从 0 到 3 的路径可以认为是青蛙跳到三阶台阶上的路径，0 的个数就是跳法的个数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;答案推导&#34;&gt;答案推导&lt;/h3&gt;
&lt;p&gt;如上所示，我们已经将问题转换成了求树中0节点的个数，根据树的递归定义，我们可以得到如下的定义:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(f(1) = 1\)&lt;/li&gt;
&lt;li&gt;\(f(n) = f(n-1) + f(n-2) + &amp;hellip; + f(1) + 1\)&lt;/li&gt;
&lt;li&gt;\(f(n-1) = \space \space \space \space \space \space \space \space \space \space \space \space f(n-2) + &amp;hellip; + f(1) + 1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;令\(f(n) - f(n-1)\)，可得：\(f(n) = 2 * f(n-1)\)。&lt;/p&gt;
&lt;p&gt;根据\(f(1) = 1\)和\(f(n) = 2 * f(n-1)\)，我们最终可以得到，\(f(n) = 2^{n-1}\)。&lt;/p&gt;
&lt;h3 id=&#34;最终答案&#34;&gt;最终答案&lt;/h3&gt;
&lt;p&gt;有了上面的推导过程，最终的编程实现很简单，我们只需要返回\(2^{n-1}\)即可，答案如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Solution&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;jumpFloorII&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;number&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 完全二叉树与满二叉树</title>
      <link>https://bwangel.me/docs/algo/binary-tree/</link>
      <pubDate>Sat, 31 Mar 2018 22:42:53 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/algo/binary-tree/</guid>
      <description>
        
        
        &lt;p&gt;本文主要讲述了完全二叉树和满二叉树的定义及一些特性&lt;/p&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;满二叉树：深度为 k 且有 \(2^k-1\) 个结点的二叉树称为满二叉树。&lt;/li&gt;
&lt;li&gt;完全二叉树：设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;满二叉树&#34;&gt;满二叉树&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; 表示总节点数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;math&#34;&gt;$$k = log_2{n+1}$$&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;它是叶子节点最多的二叉树，叶子节点个数是&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;math&#34;&gt;$$(n+1) / 2$$&lt;/div&gt;&lt;h2 id=&#34;完全二叉树&#34;&gt;完全二叉树&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; 表示总节点数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;math&#34;&gt;$$log_2{n} + 1 向下取整$$&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 算法复杂度小记</title>
      <link>https://bwangel.me/docs/algo/algorithm-complexity/</link>
      <pubDate>Fri, 08 Sep 2017 00:24:12 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/algo/algorithm-complexity/</guid>
      <description>
        
        
        &lt;p&gt;本文主要书写了本人对于算法复杂度的一些理解，并辅以一些例子进行说明&lt;/p&gt;
&lt;h2 id=&#34;算法复杂度的概念&#34;&gt;算法复杂度的概念&lt;/h2&gt;
&lt;h3 id=&#34;从一个简单的例子入手&#34;&gt;从一个简单的例子入手&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cal&lt;/code&gt; 是一个简单的求和函数, 我们将它的执行时间定义为 \( T(n) \) 。从 CPU 的角度来看，每一行代码都执行着类似的操作 &lt;strong&gt;读数据 - 运算 - 写数据&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;尽管每行代码编译出来的汇编代码都是不同的(汇编指令的个数也不同)，执行时间也都不一样。但我们这里只是粗略估计，为了简单起见，我们将每一行的代码的执行时间都定义为 &lt;code&gt;unit_time&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第 2, 3 行只执行需要一个 &lt;code&gt;unit_time&lt;/code&gt;， 第4, 5行需要执行 N 个 &lt;code&gt;unit_time&lt;/code&gt;, 可以得到&lt;/p&gt;
&lt;p&gt;$$ T(n) = unit\_time * (1 + 1 + n + n) = unit\_time * (2n + 2) $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上述分析中，我们忽略了调用函数时入参和返回参数所需的时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义 \( f(n) = 2n+2 \)，由于 &lt;code&gt;unit_time&lt;/code&gt; 始终都是一个正数，&lt;strong&gt;我们可以得出 &lt;code&gt;cal&lt;/code&gt; 函数的执行时间 \( T(n) \) 和每行代码的执行次数 \( f(n) \) 成正比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上关系我们可以用 字母 &lt;code&gt;O&lt;/code&gt; 来表示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( T(n) = O(f(n)) ，即代码的执行时间 T(n) 和 某个函数 f(n) 成正比。\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是准确计算某个函数共有多少行代码需要执行，这也是一个困难的工作，我们可以将 &lt;code&gt;O&lt;/code&gt; 的定义进一步精确。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( T(n) = O(f(n)) \)，代码的执行时间随着数据规模(&lt;code&gt;n&lt;/code&gt;)增长的 &lt;strong&gt;增长趋势&lt;/strong&gt;。所以，&lt;code&gt;O&lt;/code&gt; 也叫做渐进时间复杂度( asymptotic time complexity)，简称时间复杂度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度的计算理念&#34;&gt;复杂度的计算理念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们不对某个算法进行精确的分析，只需要初略地知道它的 &lt;strong&gt;增长趋势&lt;/strong&gt; 就可以了。&lt;/li&gt;
&lt;li&gt;平常我们分析算法复杂度的时候，通常有分析最坏情况和平均情况两种选项，由于最坏情况易于分析，所以我们一般分析算法复杂度的最坏情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度的渐进表示法&#34;&gt;复杂度的渐进表示法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上界&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ T(n) = O(f(n)) $$&lt;/p&gt;
&lt;p&gt;上述式子表示当N足够大的时候，&lt;code&gt;f(n)&lt;/code&gt;函数是&lt;code&gt;T(n)&lt;/code&gt;的上界。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下界&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ T(n) = \Omega(h(n)) $$&lt;/p&gt;
&lt;p&gt;上述式子表示当N足够大的时候，&lt;code&gt;h(n)&lt;/code&gt;函数是&lt;code&gt;T(n)&lt;/code&gt;的下界。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上界和下界同时成立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$ T(n) = \Theta(g(n)) $$&lt;/p&gt;
&lt;p&gt;上述式子表示当N足够大的时候，&lt;code&gt;g(n)&lt;/code&gt;函数同时是&lt;code&gt;T(n)&lt;/code&gt;的上界和下界。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在上面三个式子中，&lt;code&gt;T(n)&lt;/code&gt;表示的都是某个算法的时间复杂度，它们也可以应用在算法的空间复杂度&lt;code&gt;S(n)&lt;/code&gt;上。&lt;/li&gt;
&lt;li&gt;一个算法的上界和下界函数可能有无穷多个，为了和现实的情况更贴合，我们在使用上述式子表示算法的复杂度的时候，通常使用 &lt;strong&gt;最小的上界&lt;/strong&gt; 和 &lt;strong&gt;最大的下界&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度的增长趋势比较&#34;&gt;复杂度的增长趋势比较&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2022-08-28-073000.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;$$ O(1) &amp;lt;  O(\log n) &amp;lt; O(n) &amp;lt; O(n \log n) &amp;lt; O(n^2) &amp;lt; O(n^3) &amp;lt; O(2^n) &amp;lt; O(n!) $$&lt;/p&gt;
&lt;p&gt;上面的复杂度量级，我们可以粗略地分成两类， 多项式量级和非多项式量级。其中，非多项式量级只有两个：指数阶 \( O(2^n) \) 和 阶乘阶 \( O(n!) \)&lt;/p&gt;
&lt;p&gt;我们把时间复杂度为非多项式量级的算法问题叫做 NP (Non-Deterministic Polynomial，非确定多项式) 问题。&lt;/p&gt;
&lt;h2 id=&#34;算法复杂度的分析规则&#34;&gt;算法复杂度的分析规则&lt;/h2&gt;
&lt;h3 id=&#34;加法法则&#34;&gt;加法法则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;多个复杂度相加，取量级最大的时间复杂度&lt;/strong&gt;，这个规则用公式表示为:&lt;/p&gt;
&lt;p&gt;$$ T_1(n) = O(f_1(n)), T_2(n) = O(f_2(n)) $$&lt;/p&gt;
&lt;p&gt;$$ T_1(n) + T_2(n) = max(O(f_1(n)), O(f_2(n))) $$&lt;/p&gt;
&lt;p&gt;由于我们分析算法复杂度的时候主要是分析它的 &lt;strong&gt;增长趋势&lt;/strong&gt; ，所以我们只需要分析算法复杂度的 &lt;strong&gt;某个主要趋势&lt;/strong&gt; 即可。&lt;/p&gt;
&lt;p&gt;有时间复杂度计算公式，&lt;/p&gt;
&lt;p&gt;$$ T(n) = O(C_1 * n^2 + C_2 * n) $$&lt;/p&gt;
&lt;p&gt;\( 在N进行增长的时候，n^2 对于 T(n) 增长的影响是远远大于 n 的，所以我们就可以忽略掉 n ，认为 T(n) = O(C_1 * n^2) \)，
常数项量级也可以忽略掉，最终为&lt;/p&gt;
&lt;p&gt;$$ T(n) = O(n^2) $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即当 &lt;code&gt;n&lt;/code&gt; 很大的时候，\( n^2 为 T(n) 的上界函数。\)&lt;/li&gt;
&lt;li&gt;即随着 &lt;code&gt;n&lt;/code&gt; 的增长，某个算法所用的时间 \( T(n) \) 的 &lt;strong&gt;增长趋势&lt;/strong&gt; 是 \( n^2 \)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\( 总结可得，当 T(n) 是关于n的k阶多项式的时候， T(n) = O(n^k) \)&lt;/p&gt;
&lt;p&gt;分析代码时，可以得出:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;一个if-else的复杂度 = max(条件判断式的复杂度，if分支的复杂度，else分支的复杂度)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;忽略常数项&#34;&gt;忽略常数项&lt;/h3&gt;
&lt;p&gt;当我们谈论时间复杂度 \( \log N \) 的时候，我们并没有说明 \( \log N \) 是以2，以10还是以&lt;code&gt;e&lt;/code&gt;为底的。&lt;/p&gt;
&lt;p&gt;这是因为当N很大的时候，\( \log_{2} N  和  \log_{10} N \) 它们之间相差了常数倍。&lt;/p&gt;
&lt;p&gt;$$ log_2N = log_{10}N * log_2 10 $$&lt;/p&gt;
&lt;p&gt;其中 \( \log_2 10 \) 是一个常数&lt;/p&gt;
&lt;p&gt;\( \log N \)的增长趋势是大于常数的增长趋势的，所以我们可以忽略掉底数的差异，直接以\( \log N \) 代指一种增长趋势。&lt;/p&gt;
&lt;h3 id=&#34;乘法法则&#34;&gt;乘法法则&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;嵌套代码的复杂度等一嵌套内外代码复杂度的乘积&lt;/strong&gt;，这个规则用公式表示为&lt;/p&gt;
&lt;p&gt;$$ T_1(n) = O(f_1(n)), T_2(n) = O(f_2(n)) $$&lt;/p&gt;
&lt;p&gt;$$ T_1(n) * T_2(n) = O(f_1(n) * f_2(n)) $$&lt;/p&gt;
&lt;p&gt;我们先看一段代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#000&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ret&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cal&lt;/code&gt; 函数除了5行，其他地方的时间复杂度是 \( O(n) \), &lt;code&gt;f&lt;/code&gt; 函数的时间复杂度是 \( O(n) \)
整个 &lt;code&gt;cal&lt;/code&gt; 函数的时间复杂度就是&lt;/p&gt;

&lt;div class=&#34;math&#34;&gt;$$T(n) = T1(n) * T2(n) = O(n*n) = O(n^2)$$&lt;/div&gt;&lt;p&gt;分析代码时，可得:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;一个for循环的复杂度 = 循环体的复杂度 * 循环次数
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;空间复杂度&#34;&gt;空间复杂度&lt;/h2&gt;
&lt;p&gt;上文说到, 时间复杂度的全称是 &lt;strong&gt;渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;类比一下，空间复杂度的全称就是 &lt;strong&gt;渐进空间复杂度 (asymptotic space complexity)，表示算法的存储空间和数据规模之间的增长关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看一段简单的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;out&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码中，第二行申请了一个固定大小的内存空间，第三行申请了一个大小为 n 的 int 类型的数组，其他行都没有申请内存空间，我们可以忽略。&lt;/p&gt;
&lt;p&gt;所以整段代码的空间复杂度就是 \( O(n) \)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们常见的空间复杂度就是 \( O(1), O(n), O(n^2) \)，像 \( O(logn), O(nlogn) \) 这样的对数阶复杂度平时都用不到&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;极客时间 《数据结构与算法之美》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.icourse163.org/course/ZJU-93001&#34;&gt;浙江大学《数据结构》公开课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
  </channel>
</rss>
