<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>647 Universe – unicode</title>
    <link>https://bwangel.me/tags/unicode/</link>
    <description>Recent content in unicode on 647 Universe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Wed, 06 Dec 2023 12:20:47 +0800</lastBuildDate>
    
	  <atom:link href="https://bwangel.me/tags/unicode/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Python2 的正则在 Mac 和 Linux 上的不同表现</title>
      <link>https://bwangel.me/docs/python/unicode-re/</link>
      <pubDate>Wed, 06 Dec 2023 12:20:47 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/python/unicode-re/</guid>
      <description>
        
        
        &lt;h2 id=&#34;表现&#34;&gt;表现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s = u&amp;#39;玛丽黛佳眉笔只-需-18,冲p腹t製o2𝒂I5EfW4xPmTq𝒃o2打🤔开桃o寶&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个字符串 s 是一段淘口令，核心内容就是 𝒂 和 𝒃 之间的 ID &lt;code&gt;I5EfW4xPmTq&lt;/code&gt;, 我们想用一个正则表达式将 ID 捕获出来。&lt;/p&gt;
&lt;p&gt;𝒂 和 𝒃 的 unicode 码点不在基本平面内，在1号平面内。Unicode 各个平面的字符范围参考 &lt;a href=&#34;https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84&#34;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 MacOS 的 Python2 上，可以用下面这段正则捕获&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ur&amp;#34;[\uD800-\uDBFF][\uDC00-\uDFFF]([a-zA-Z0-9]{11})[\uD800-\uDBFF][\uDC00-\uDFFF]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;D800-DBFF&lt;/code&gt;, &lt;code&gt;DC00-DFFF&lt;/code&gt; 表示非基本平面的字符，用 utf-16 编码后，生成的两个字节。&lt;/p&gt;
&lt;p&gt;MacOS 的 Python2 中，编译的时候默认使用了 UCS2 作为 Unicode 的编码实现，&lt;code&gt;sys.maxunicode == 65535&lt;/code&gt;， 它不支持展示非基本平面外的 unicode 字符，所以只能用这种办法来绕过。&lt;/p&gt;
&lt;p&gt;在 Linux 的 Python2 中，上述正则就失效了，需要用另外一个正则&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ur&amp;#34;[\U00010000-\U0001FFFF]([a-zA-Z0-9]{11})[\U00010000-\U0001FFFF]&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;00010000-0001FFFF&lt;/code&gt; 表示1号平面内的所有字符。&lt;/p&gt;
&lt;p&gt;Linux 的 Python2 中，Unicode 的编码实现使用的是 UCS4，&lt;code&gt;sys.maxunicode == 1114111&lt;/code&gt;, 它可以展示 Unicode 17 个平面中的所有字符，所以在正则中可以直接写非基本平面的码点&lt;/p&gt;
&lt;h2 id=&#34;如何开启-ucs4&#34;&gt;如何开启 UCS4&lt;/h2&gt;
&lt;p&gt;编译 Python 的时候，指定 &lt;code&gt;--enable-unicode=ucs4&lt;/code&gt; 即可指定 unicode 的编码实现是 UCS4, 从而支持展示所有平面的 Unicode 码点。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -O https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz
tar xf ./Python-2.7.8.tgz
cd ./Python-2.7.8
./configure --enable-unicode=ucs4 --prefix=/path/to/install MACOSX_DEPLOYMENT_TARGET=10.9
make
make install
cd
/path/to/install/bin/python2.7
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/25112348/5161084&#34;&gt;How to install python on Mac with wide-build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84&#34;&gt;Unicode字符平面映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/malecrab/p/5300503.html&#34;&gt;细说：Unicode, UTF-8, UTF-16, UTF-32, UCS-2, UCS-4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 细说：Unicode, UTF-8, UTF-16, UTF-32, UCS-2, UCS-4</title>
      <link>https://bwangel.me/docs/encoding/unicode/</link>
      <pubDate>Tue, 05 Dec 2023 19:18:29 +0800</pubDate>
      
      <guid>https://bwangel.me/docs/encoding/unicode/</guid>
      <description>
        
        
        &lt;p&gt;原文链接: &lt;a href=&#34;https://www.cnblogs.com/malecrab/p/5300503.html&#34;&gt;Malecrab 的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章讲的非常清楚了，我这里复制一份用于备份，查找。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;unicode与iso-10646&#34;&gt;Unicode与ISO 10646&lt;/h2&gt;
&lt;p&gt;全世界很多个国家都在为自己的文字编码，并且互不相通，不同的语言字符编码值相同却代表不同的符号（例如：韩文编码 EUC-KR 中 “한국어” 的编码值正好是汉字编码GBK中的“茄惫绢”）。&lt;/p&gt;
&lt;p&gt;因此，同一份文档，拷贝至不同语言的机器，就可能成了乱码，于是人们就想：我们能不能定义一个超大的字符集，它可以容纳全世界所有的文字字符，再对它们统一进行编码，让每一个字符都对应一个不同的编码值，从而就不会再有乱码了。&lt;/p&gt;
&lt;p&gt;如果说“各个国家都在为自己文字独立编码”是百家争鸣，那么“建立世界统一的字符编码”则是一统江湖，谁都想来做这个武林盟主。早前就有两个机构试图来做这个事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;国际标准化组织（ISO），他们于1984年创建ISO/IEC JTC1/SC2/WG2工作组，试图制定一份“通用字符集”（Universal Character Set，简称UCS），并最终制定了ISO 10646标准。&lt;/li&gt;
&lt;li&gt;统一码联盟，他们由Xerox、Apple等软件制造商于1988年组成，并且开发了Unicode标准（The Unicode Standard，这个前缀Uni很牛逼哦 &amp;mdash; Unique, Universal, and Uniform）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1991年前后，两个项目的参与者都认识到，世界不需要两个不兼容的字符集。于是，它们开始合并双方的工作成果，并为创立一个单一编码表而协同工作。从Unicode 2.0开始，Unicode采用了与ISO 10646-1相同的字库和字码；&lt;/p&gt;
&lt;p&gt;ISO也承诺，ISO 10646将不会替超出U+10FFFF的UCS-4编码赋值，以使得两者保持一致。两个项目仍都独立存在，并独立地公布各自的标准。不过由于Unicode这一名字比较好记，因而它使用更为广泛。&lt;/p&gt;
&lt;p&gt;Unicode编码点分为17个平面（plane），每个平面包含 \( 2^{16} \)（即65536）个码点（code point）。17个平面的码点可表示为从 &lt;code&gt;U+xx0000&lt;/code&gt; 到 &lt;code&gt;U+xxFFFF&lt;/code&gt;，其中xx表示十六进制值从 &lt;code&gt;0x00&lt;/code&gt; 到 &lt;code&gt;0x10&lt;/code&gt;，共计17个平面。&lt;/p&gt;
&lt;h2 id=&#34;utf-32-与-ucs-4&#34;&gt;UTF-32 与 UCS-4&lt;/h2&gt;
&lt;p&gt;在 Unicode 与 ISO 10646 合并之前，ISO 10646标准为 &lt;strong&gt;通用字符集&lt;/strong&gt;（UCS）定义了一种31位的编码形式（即UCS-4），其编码固定占用4个字节，编码空间为 &lt;code&gt;0x00000000~0x7FFFFFFF&lt;/code&gt;（可以编码20多亿个字符）。&lt;/p&gt;
&lt;p&gt;UCS-4有20多亿个编码空间，但实际使用范围并不超过 &lt;code&gt;0x10FFFF&lt;/code&gt;，并且为了兼容Unicode标准，ISO也承诺将不会为超出 &lt;code&gt;0x10FFFF&lt;/code&gt; 的 UCS-4 编码赋值。由此 UTF-32 编码被提出来了，它的编码值与UCS-4相同，只不过其编码空间被限定在了 &lt;code&gt;0~0x10FFFF&lt;/code&gt; 之间。因此也可以说：UTF-32是UCS-4的一个子集。&lt;/p&gt;
&lt;h2 id=&#34;utf-16与ucs-2&#34;&gt;UTF-16与UCS-2&lt;/h2&gt;
&lt;p&gt;除了UCS-4，ISO 10646 标准为 “通用字符集”（UCS）定义了一种16位的编码形式（即UCS-2），其编码固定占用2个字节，它包含65536个编码空间（可以为全世界最常用的63K字符编码，为了兼容Unicode，&lt;code&gt;0xD800-0xDFFF&lt;/code&gt; 之间的码点未使用）。例：“汉” 的UCS-2编码为6C49。&lt;/p&gt;
&lt;p&gt;但俩个字节并不足以正真地“一统江湖”（a fixed-width 2-byte encoding could not encode enough characters to be truly universal），于是UTF-16诞生了，与UCS-2一样，它使用两个字节为全世界最常用的63K字符编码，不同的是，它使用4个字节对不常用的字符进行编码。UTF-16属于变长编码。&lt;/p&gt;
&lt;p&gt;前面提到过：Unicode编码点分为17个平面（plane），每个平面包含216（即65536）个码点（code point），而第一个平面称为“基本多语言平面”（Basic Multilingual Plane，简称BMP），其余平面称为“辅助平面”（Supplementary Planes）。&lt;/p&gt;
&lt;p&gt;其中“基本多语言平面”（&lt;code&gt;0~0xFFFF&lt;/code&gt;）中 &lt;code&gt;0xD800~0xDFFF&lt;/code&gt; 之间的码点作为保留，未使用。UCS-2只能编码“基本多语言平面”中的字符，此时 UTF-16 与 UCS-2 的编码一样（都直接使用Unicode的码点作为编码值），例：“汉”在Unicode中的码点为6C49，而在UTF-16编码也为6C49。另外，UTF-16还可以利用保留下来的 0xD800-0xDFFF 区段的码点来对“辅助平面”的字符的码点进行编码，因此UTF-16可以为Unicode中所有的字符编码。&lt;/p&gt;
&lt;p&gt;UTF-16中如何对“辅助平面”进行编码呢？&lt;/p&gt;
&lt;p&gt;Unicode的码点区间为 &lt;code&gt;0~0x10FFFF&lt;/code&gt;，除“基本多语言平面”外，还剩 &lt;code&gt;0xFFFFF&lt;/code&gt; 个码点（并且其值都大于或等于0x10000）。对于“辅助平面”内的字符来说，如果用它们在Unicode中码点值减去0x10000，则可以得到一个0~0xFFFFF的区间（该区间中的任意值都可以用一个20-bits的数字表示）。该数字的前10位(bits)加上0xD800，就得到UTF-16四字节编码中的前两个字节；该数字的后10位(bits)加上0xDC00，就得到UTF-16四字节编码中的后两个字节。例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://passage-1253400711.cos.ap-beijing.myqcloud.com/2023-12-05-193030.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;（这个字念啥？^_^）&lt;/p&gt;
&lt;p&gt;上面这个汉字的 Unicode 码点值为 2AEAB，减去0x10000得到1AEAB（二进制值为 &lt;strong&gt;0001 1010 11&lt;/strong&gt; 10 1010 1011），前10位加上D800得到D86B，后10位加上DC00得到DEAB。于是该字的UTF-16编码值为 D86BDEAB（该值为大端表示，小端为6BD8ABDE）。&lt;/p&gt;
&lt;p&gt;使用 Python 输出 utf-16 编码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 小端&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;In&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\U0002AEAB&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;encode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;utf-16-le&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Out&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;k&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\xd8\xab\xde&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 大端会输出6个字节，在前面填充 0xff, 0xfe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;In&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\U0002AEAB&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;encode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Out&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\xff\xfe&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\xd8\xab\xde&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;utf-8&#34;&gt;UTF-8&lt;/h2&gt;
&lt;p&gt;从前述内容可以看出：无论是 UTF-16/32 还是 UCS-2/4，一个字符都需要多个字节来编码，这对那些英语国家来说多浪费带宽啊！（尤其在网速本来就不快的那个年代。。。）由此，UTF-8产生了。在UTF-8编码中，ASCII码中的字符还是ASCII码的值，只需要一个字节表示，其余的字符需要2字节、3字节或4字节来表示。&lt;/p&gt;
&lt;p&gt;UTF-8的编码规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于ASCII码中的符号，使用单字节编码，其编码值与ASCII值相同（详见：&lt;a href=&#34;https://www.unicode.org/charts/PDF/U0000.pdf&#34;&gt;U0000.pdf&lt;/a&gt;）。其中ASCII值的范围为 &lt;code&gt;0~0x7F&lt;/code&gt;，所有编码的二进制值中第一位为0（这个正好可以用来区分单字节编码和多字节编码）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它字符用多个字节来编码（假设用N个字节），多字节编码需满足：第一个字节的前N位都为1，第N+1位为0，后面 N-1 个字节的前两位都为10，这N个字节中其余位全部用来存储Unicode中的码点值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字节数&lt;/th&gt;
&lt;th&gt;Unicode&lt;/th&gt;
&lt;th&gt;UTF-8编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;000000-00007F&lt;/td&gt;
&lt;td&gt;0xxxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;000080-0007FF&lt;/td&gt;
&lt;td&gt;110xxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;000800-00FFFF&lt;/td&gt;
&lt;td&gt;1110xxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;010000-10FFFF&lt;/td&gt;
&lt;td&gt;11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单地说：Unicode属于字符集，不属于编码，UTF-8、UTF-16等是针对Unicode字符集的编码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTF-8、UTF-16、UTF-32、UCS-2、UCS-4对比：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对比&lt;/th&gt;
&lt;th&gt;UTF-8&lt;/th&gt;
&lt;th&gt;UTF-16&lt;/th&gt;
&lt;th&gt;UTF-32&lt;/th&gt;
&lt;th&gt;UCS-2&lt;/th&gt;
&lt;th&gt;UCS-4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;编码空间&lt;/td&gt;
&lt;td&gt;0-10FFFF&lt;/td&gt;
&lt;td&gt;0-10FFFF&lt;/td&gt;
&lt;td&gt;0-10FFFF&lt;/td&gt;
&lt;td&gt;0-FFFF&lt;/td&gt;
&lt;td&gt;0-7FFFFFFF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最少编码字节数&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最多编码字节数&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否依赖字节序&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unicode&#34;&gt;维基百科：Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_Coded_Character_Set&#34;&gt;维基百科：Universal Coded Character Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-8&#34;&gt;维基百科：UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-16&#34;&gt;维基百科：UTF-16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/UTF-32&#34;&gt;维基百科：UTF-32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unicode.org/faq/utf_bom.html&#34;&gt;FAQ: UTF-8, UTF-16, UTF-32 &amp;amp; BOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unicode.org/charts/&#34;&gt;Unicode 8.0 Character Code Charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unicode.org/charts/PDF/U4E00.pdf&#34;&gt;CJK Unified Ideographs (Han)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html&#34;&gt;阮一峰：字符编码笔记：ASCII，Unicode和UTF-8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lucumr.pocoo.org/2014/1/9/ucs-vs-utf8/&#34;&gt;UCS vs UTF-8 as Internal String Encoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
